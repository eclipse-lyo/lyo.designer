[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module serviceProviderCatalogServices('http://org.eclipse.lyo/oslc4j/adaptorInterface')/]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]

[query public containingServiceProviderCatalog(obj : OclAny) : ServiceProviderCatalog =
obj.eContainer(ServiceProviderCatalog)
/]

[comment Services for serviceProviderCatalogSingleton /]
[query public javaClassPackageNameForSingleton(aServiceProviderCatalog : ServiceProviderCatalog) : String = 
javaBasePackageName(containingAdaptorInterface(aServiceProviderCatalog)).concat('.servlet')
/]

[query public javaClassNameForSingleton(aServiceProviderCatalog : ServiceProviderCatalog) : String = 
'ServiceProviderCatalogSingleton'
/]

[query public javaClassFullNameForSingleton(aServiceProviderCatalog : ServiceProviderCatalog) : String = 
javaClassPackageNameForSingleton(aServiceProviderCatalog).concat('.').concat(javaClassNameForSingleton(aServiceProviderCatalog))
/]

[query public javaClassFullFileNameForSingleton(aServiceProviderCatalog : ServiceProviderCatalog) : String = 
javaFilesBasePath(containingAdaptorInterface(aServiceProviderCatalog)).concatenatePaths(javaClassPackageNameForSingleton(aServiceProviderCatalog).substituteAll('.', '/')).concat('/').concat(javaClassNameForSingleton(aServiceProviderCatalog)).concat('.java')
/]

[comment Services for serviceProviderCatalogService /]
[query public javaClassPackageNameForService(aServiceProviderCatalog : ServiceProviderCatalog) : String = 
javaBasePackageName(containingAdaptorInterface(aServiceProviderCatalog)).concat('.services')
/]

[query public javaClassNameForService(aServiceProviderCatalog : ServiceProviderCatalog) : String = 
'ServiceProviderCatalogService'
/]

[query public javaClassFullNameForService(aServiceProviderCatalog : ServiceProviderCatalog) : String = 
javaClassPackageNameForService(aServiceProviderCatalog).concat('.').concat(javaClassNameForService(aServiceProviderCatalog))
/]

[query public javaClassFullFileNameForService(aServiceProviderCatalog : ServiceProviderCatalog) : String = 
javaFilesBasePath(containingAdaptorInterface(aServiceProviderCatalog)).concatenatePaths(javaClassPackageNameForService(aServiceProviderCatalog).substituteAll('.', '/')).concat('/').concat(javaClassNameForService(aServiceProviderCatalog)).concat('.java')
/]
