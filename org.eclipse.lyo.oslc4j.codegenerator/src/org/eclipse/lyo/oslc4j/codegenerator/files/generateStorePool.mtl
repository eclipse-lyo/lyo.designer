[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2020 Jad El-khoury and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 *******************************************************************************/
/]

[module generateStorePool('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::storeServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::domainSpecificationServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::webServiceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderCatalogServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::osgiServices/]

[template public generateStorePool(anAdaptorInterface : AdaptorInterface)]
[if (anAdaptorInterface.storeEnabled())]
[file (anAdaptorInterface.javaClassFullFileNameForStorePool(), false, 'UTF-8')]
// [protected ('Copyright')]
/*******************************************************************************
 * Copyright (c) 2020 Jad El-khoury and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// [/protected]

package [anAdaptorInterface.javaClassPackageNameForStorePool()/];

import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.eclipse.lyo.store.Store;
import org.eclipse.lyo.store.StoreAccessException;
import org.eclipse.lyo.store.StoreFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// [protected ('imports')]
// [/protected]

// [protected ('pre_class_code')]
// [/protected]

public class [anAdaptorInterface.javaClassNameForStorePool()/] {

    private URI defaultNamedGraphUri;
    private List<Store> storePool;
    private List<Store> usedStores;
    private Object lock = new Object();
    private static final Logger log = LoggerFactory.getLogger([anAdaptorInterface.javaClassNameForStorePool()/].class);

    //You can override the value of this property in the class constructors. 
    //Use the protected user code blocks to ensure changes are maintained when code is re-generated.
    private static int INITIAL_POOL_SIZE = 500;

    // [protected ('class_attributes')]
    // [/protected]

    // [protected ('class_methods')]
    // [/protected]

    public [anAdaptorInterface.javaClassNameForStorePool()/] (URI sparqlQueryUrl, URI sparqlUpdateUrl, URI defaultNamedGraphUri, String userName, String password) throws StoreAccessException {
        this.defaultNamedGraphUri = defaultNamedGraphUri;
        this.storePool = new ArrayList<>(INITIAL_POOL_SIZE);
        this.usedStores = new ArrayList<>();
        // [protected ('constructor_init_1')]
        // [/protected]
        for (int i = 0; i < INITIAL_POOL_SIZE; i++) {
            Store s = null;
            if( userName != null && password != null ){
                s = StoreFactory.sparql(sparqlQueryUrl.toString(), sparqlUpdateUrl.toString(), userName, password);
            }else{
                s = StoreFactory.sparql(sparqlQueryUrl.toString(), sparqlUpdateUrl.toString());
            }
            storePool.add(s);
        }
        // [protected ('constructor_finalize_1')]
        // [/protected]
    }

    public static [anAdaptorInterface.javaClassNameForStorePool()/] create (String propertiesFileName) throws StoreAccessException {
        // [protected ('create_init')]
        // [/protected]
        Properties lyoStoreProperties = new Properties();
        String lyoStorePropertiesFile = [anAdaptorInterface.javaClassNameForStorePool()/].class.getResource(propertiesFileName).getFile();
        try {
            lyoStoreProperties.load(new FileInputStream(lyoStorePropertiesFile));
        } catch (IOException e) {
            log.error("Failed to initialize Store. properties file for Store configuration could not be loaded.", e);
            throw new StoreAccessException(e);
        }

        URI defaultNamedGraph;
        URI sparqlQueryUrl;
        URI sparqlUpdateUrl;
        try {
            defaultNamedGraph = new URI(lyoStoreProperties.getProperty("defaultNamedGraph"));
            sparqlQueryUrl = new URI(lyoStoreProperties.getProperty("sparqlQueryUrl"));
            sparqlUpdateUrl = new URI(lyoStoreProperties.getProperty("sparqlUpdateUrl"));
        } catch (URISyntaxException e) {
            log.error("Failed to initialize Store. One of the configuration property ('defaultNamedGraph' or 'sparqlQueryUrl' or 'sparqlUpdateUrl') is not a valid URI.", e);
            throw new StoreAccessException(e);
        }
        String userName = lyoStoreProperties.getProperty("username");
        String password = lyoStoreProperties.getProperty("password");
        // [protected ('create_finalize')]
        // [/protected]
        return new [anAdaptorInterface.javaClassNameForStorePool()/](sparqlQueryUrl, sparqlUpdateUrl, defaultNamedGraph, userName, password);
    }

    public URI getDefaultNamedGraphUri() {
        return defaultNamedGraphUri;
    }

    public Store getStore() {
        if (storePool.isEmpty()) {
            throw new RuntimeException("Maximum pool size reached, no available store connections!");
        }
        Store s;
        synchronized(lock) {
            s = storePool.remove(storePool.size() - 1);
            usedStores.add(s);
        }
        return s;
    }
     
    public boolean releaseStore(Store store) {
        synchronized(lock) {
            storePool.add(store);
            return usedStores.remove(store);
        }
    }
}
[/file]
[/if]
[/template]
