[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module generateUiPreviewHelperJs('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::jspServices/]

[template public generateUiPreviewHelperJs(anAdaptorInterface : AdaptorInterface)]
[file (webFilesBasePath(anAdaptorInterface).concat('/static/js/ui-preview-helper.js') , false, 'UTF-8')]
// [protected ('"Copyright Header"')]
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// [/protected]

//Setup a popover on each of the oslcLinkElements, where the popover content is an iframe presenting the OSLC UI-Preview.
function setupUiPreviewOnPopover(oslcLinkElements) {
    oslcLinkElements.popover({
        container: "body",
        content: "Loading...",
        delay: {"show": 120, "hide": 60},
        html: true,
        placement: "auto",
        trigger: "hover"
    });

    oslcLinkElements.on("show.bs.popover", function () {
        var uiElem = $(this);
        var popoverElem = uiElem.data('bs.popover');
        getUiPreviewIframes(this.getAttribute("href"), attachIframeToHyperlinkElement, uiElem);
    })
}

function attachIframeToHyperlinkElement(compactStructure, uiElem) {
    uiElem.attr('data-original-title', compactStructure.title);
    var preview = compactStructure.small;
    var w = preview.width ? preview.width : "450em";
    var h = preview.height ? preview.height : "100em";
    var iframeHtml = "<iframe src='" + preview.uri + "' ";
    iframeHtml += " style='border:0px; height:" + h + "; width:" + w + "'";
    iframeHtml += "></iframe>";
    uiElem.attr('data-content', iframeHtml);
    uiElem.data('bs.popover').setContent();
}

//Perform an asynch GET request to obtain the resource's UI-Preview information (an OSLC Compact resource).
//callbackFunction is then called once the request response is obtained.
//The caller should supply this callbackFunction, with any desired paramters under "callbackParamter" 
//callbackFunction will be called with the following parameters (a) compactStructure, (d) callbackParamter
//where compactStructure represents more detailed about the OSLC Compact resource.
function getUiPreviewIframes(resourceUrl, callbackFunction, callbackParamter) {
    xmlhttp = new XMLHttpRequest();
    xmlhttp.onload = function () {
        if (this.status==200) {
            data = this.responseText;
            try {
                var parser = new DOMParser();
                var xmlDoc = parser.parseFromString(data,"text/xml");
                var compactStructure = oslcCompactJsonStructure(xmlDoc);
                callbackFunction(compactStructure, callbackParamter);
            } catch (e) {
                iframeHtml = "<b>Error parsing preview dialog info</b>";
                callbackFunction("Error", callbackParamter);
            }
        }
        else {
            iframeHtml = "<b>Error loading the preview dialog</b> status:" + this.status;
            callbackFunction("Error", callbackParamter);
        }
    };
    xmlhttp.open("GET", resourceUrl, true);
    xmlhttp.setRequestHeader("Accept", "application/x-oslc-compact+xml");
    xmlhttp.send();
}

//returns a JSON struct representing a large and small UI-Preview info (uri, title, height and width) based on an OSLC Compact RDF resource.
function oslcCompactJsonStructure(oslcCompactXmlDocument) {
    var compactStructure = {};
    var compact = findFirstChildNode(findFirstChildNode(oslcCompactXmlDocument));

    var titleChild = findFirstChildNodeNamed(compact, 'dcterms:title');
    compactStructure.title = titleChild.textContent;

    var smallPrev = findFirstChildNodeNamed(compact, 'oslc:smallPreview');
    if (smallPrev !== null) {
        var preview = findFirstChildNode(smallPrev);
        if (preview) {
            compactStructure.small = {};
            var document = findFirstChildNodeNamed(preview, 'oslc:document');
            if (document) 
                compactStructure.small.uri = document.getAttribute('rdf:resource');
            var height = findFirstChildNodeNamed(preview, 'oslc:hintHeight');
            compactStructure.small.height = height.textContent;
            var width = findFirstChildNodeNamed(preview, 'oslc:hintWidth');
            compactStructure.small.width = width.textContent;
        }
    }
    var largePrev = findFirstChildNodeNamed(compact, 'oslc:largePreview');
    if (largePrev !== null) {
        var preview = findFirstChildNode(largePrev);
        if (preview) {
            compactStructure.large = {};
            var document = findFirstChildNodeNamed(preview, 'oslc:document');
            if (document)
                compactStructure.large.uri = document.getAttribute('rdf:resource');
            var height = findFirstChildNodeNamed(preview, 'oslc:hintHeight');
            compactStructure.large.height = height.textContent;
            var width = findFirstChildNodeNamed(preview, 'oslc:hintWidth');
            compactStructure.large.width = width.textContent;
        }
    }
    return compactStructure;
}

function findFirstChildNode(e) {
    for (i = 0; i < e.childNodes.length; i++) {
        if (e.childNodes['[i]'/].nodeType === Node.ELEMENT_NODE) {
            return e.childNodes['[i]'/];
        }
    }
}

function findFirstChildNodeNamed(e, nodeName) {
    for (i = 0; i < e.childNodes.length; i++) {
        if (e.childNodes['[i]'/].nodeType === Node.ELEMENT_NODE
                && e.childNodes['[i]'/].nodeName === nodeName) {
            return e.childNodes['[i]'/];
        }
    }
}
[/file]
[/template]
