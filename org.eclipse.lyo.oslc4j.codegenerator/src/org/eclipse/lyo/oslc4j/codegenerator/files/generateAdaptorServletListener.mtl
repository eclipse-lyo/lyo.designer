[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module generateAdaptorServletListener('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::storeServices/]

[template public additionalContextInitialization(traceabilityContext : OclAny) post (trim())]
[/template]

[template public additionalContextDestroyed(traceabilityContext : OclAny) post (trim())]
[/template]

[template public generateImports(anAdaptorInterface : AdaptorInterface)]
import java.net.MalformedURLException;
import java.util.NoSuchElementException;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.ArrayList;
import java.net.URI;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.ServletRegistration;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import [javaClassFullNameForAdaptorManager(anAdaptorInterface) /];

[if (anAdaptorInterface.storeEnabled())][anAdaptorInterface.storeImports()/][/if]
[if (anAdaptorInterface.trsServiceEnabled())]
import org.eclipse.lyo.oslc4j.trs.server.InmemPagedTrs;
import org.eclipse.lyo.oslc4j.trs.server.PagedTrs;
import org.eclipse.lyo.oslc4j.trs.server.PagedTrsFactory;
import org.eclipse.lyo.oslc4j.trs.server.TrsEventHandler;
[/if]

// [protected ('imports')]
// [/protected]
[/template]

[template public generateAdaptorServletListener(anAdaptorInterface : AdaptorInterface)]
[file (javaClassFullFileNameForAdaptorServletListener(anAdaptorInterface), false, 'UTF-8')]
// [protected ('Copyright')]
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// [/protected]

package [javaClassPackageNameForAdaptorServletListener(anAdaptorInterface) /];

[generateImports(anAdaptorInterface)/]

/**
 * During the initialization of this ServletListener, the base URI for the OSLC resources produced by this server is configured through the OSLC4J method setPublicURI().
 * <p>
 * See getConfigurationProperty() for the different alternatives to set this base URI. 
 */
public class [javaClassNameForAdaptorServletListener(anAdaptorInterface) /] implements ServletContextListener  {
    private static final Logger logger = LoggerFactory.getLogger([javaClassNameForAdaptorServletListener(anAdaptorInterface)/].class);

    [anAdaptorInterface.storeClassAttributes()/]
    [if (anAdaptorInterface.trsServiceEnabled())]
    private static PagedTrs pagedTrs;
    private static TrsEventHandler trsEventHandler;
    [/if]
    // [protected ('class_attributes')]
    // [/protected]

    public ServletListener() {
        super();
    }

    [if (anAdaptorInterface.trsServiceEnabled())]
    public static PagedTrs getPagedTrs() {
        return pagedTrs;
    }

    public static TrsEventHandler getTrsEventHandler() {
        return trsEventHandler;
    }

    // [protected ('trsMethods')]
    // TODO Use one of these methods to update the PagedTrs service, when appropriate.
    // trsEventHandler.['[onCreated|onModified|onDeleted]'/]();
    // [/protected]
    [/if]

    @Override
    public void contextInitialized(final ServletContextEvent servletContextEvent)
    {
        //These are default values. You can modify any of them early in this method.
        String basePathKey = "baseurl";
        String fallbackBase = "http://localhost:8080";
        String servletName = "JAX-RS Servlet";

        // [protected ('contextInitialized_init')]
        // [/protected]

        ServletContext servletContext = servletContextEvent.getServletContext();
        String basePathProperty = getConfigurationProperty(basePathKey, fallbackBase, servletContext, [javaClassNameForAdaptorServletListener(anAdaptorInterface) /].class);
        UriBuilder builder = UriBuilder.fromUri(basePathProperty);
        String baseUrl = builder.path(servletContext.getContextPath()).build().toString();
        String servletUrlPattern = "services/";
        try {
            servletUrlPattern = getServletUrlPattern(servletContextEvent, servletName);
        } catch (Exception e1) {
            logger.error("servletListner encountered problems identifying the servlet URL pattern.", e1);
        }
        try {
            logger.info("Setting public URI: " + baseUrl);
            OSLC4JUtils.setPublicURI(baseUrl);
            logger.info("Setting servlet path: " + servletUrlPattern);
            OSLC4JUtils.setServletPath(servletUrlPattern);
        } catch (MalformedURLException e) {
            logger.error("servletListner encountered MalformedURLException.", e);
        } catch (IllegalArgumentException e) {
            logger.error("servletListner encountered IllegalArgumentException.", e);
        }

        logger.info("servletListner contextInitialized.");

        // [protected ('contextInitialized_mid')]
        // TODO Implement code to establish connection to data backbone etc ...
        // [/protected]
        [if (anAdaptorInterface.storeEnabled())]
        [anAdaptorInterface.storeInitialization()/]
        [/if]
        [if (anAdaptorInterface.trsServiceEnabled())]
        // [protected ('TRSInitialise')]
        // [/protected]
        ArrayList<URI> uris = new ArrayList<URI>();
        // [protected ('TRSInitialBase')]
        //TODO: Provide the initial list of URIs to populate the TRS log with
        // [/protected]
        InmemPagedTrs temp = new PagedTrsFactory().getInmemPagedTrs([anAdaptorInterface.trsService.basePageLimit/], [anAdaptorInterface.trsService.changeLogPageLimit/], uris);
        pagedTrs = temp;
        trsEventHandler = temp;
        // [protected ('TRSFinalize')]
        // [/protected]
        [/if]

        [additionalContextInitialization()/]
        // [protected ('contextInitialized_final')]
        // [/protected]
    }

    @Override
    public void contextDestroyed(ServletContextEvent servletContextEvent)
    {
        // [protected ('contextDestroyed_init')]
        // [/protected]

        // Shutdown connections to data backbone etc...
        // [protected ('contextDestroyed_mid')]
        // TODO Implement code to shutdown connections to data backbone etc...
        // [/protected]

        [additionalContextDestroyed()/]
        // [protected ('contextDestroyed_final')]
        // [/protected]
    }

    // [protected ('class_methods')]
    // [/protected]

    /**
     * For a property 'scheme', this is the lookup priority:
     * <p>
     * <ol>
     *     <li>LYO_SCHEME env variable</li>
     *     <li>%pkg_name%.scheme JVM property, e.g. org.eclipse.lyo.oslc4j.core.servlet.scheme</li>
     *     <li>%pkg_name%.scheme Servlet Context parameter, e.g. org.eclipse.lyo.oslc4j.core.servlet.scheme</li>
     * </ol>
     * @param key property key name
     * @param defaultValue default String value
     * @param klass Class of the ServletListener
     * @return value, if found, from ENV, JVM, or Servlet Context (in this order)
     */
    private static String getConfigurationProperty(String key, String defaultValue, final ServletContext servletContext, Class klass) {
        String value = getConfigurationPropertyFromEnvironment(generateEnvironmentKey(key))
            .orElseGet(() -> getConfigurationPropertyFromSystemProperties(generateFullyQualifiedKey(klass, key))
                .orElseGet(() -> getConfigurationPropertyFromContext(servletContext, generateFullyQualifiedKey(klass, key))
                    .orElse(defaultValue)));
        return value;
    }

    /**
     * property name 'scheme' would become "org.eclipse.lyo.oslc4j.core.servlet.scheme"
     */
    private static String generateFullyQualifiedKey(Class klass, String key) {
        return klass.getPackage().getName() + '.' + key;
    }

    /**
     * web.xml property ending in '.scheme' would become "LYO_SCHEME"
     */
    private static String generateEnvironmentKey(String key) {
        return "LYO_" + key.toUpperCase(Locale.ROOT).replace('.', '_');
    }

    private static Optional<String> getConfigurationPropertyFromEnvironment(String basePathEnvKey) {
        final Map<String, String> env = System.getenv();
        if (!env.containsKey(basePathEnvKey)) {
            logger.debug("ENV variable '{}' not defined", basePathEnvKey);
            return Optional.empty();
        }
        logger.info("Found {} env variable", basePathEnvKey);
        return Optional.of(env.get(basePathEnvKey));
    }

    private static Optional<String> getConfigurationPropertyFromSystemProperties(String basePathContextPropertyKey) {
        String value = System.getProperty(basePathContextPropertyKey);
        if (value == null || value.trim().isEmpty()) {
            logger.debug("System (JVM) property '{}' not defined", basePathContextPropertyKey);
            return Optional.empty();
        }
        logger.info("Found {} System (JVM) property", basePathContextPropertyKey);
        return Optional.of(value);
    }

    private static Optional<String> getConfigurationPropertyFromContext(final ServletContext servletContext, String basePathContextPropertyKey) {
        String value = servletContext.getInitParameter(basePathContextPropertyKey);
        if (value == null || value.trim().isEmpty()) {
            logger.debug("Servlet Context parameter '{}' not defined", basePathContextPropertyKey);
            return Optional.empty();
        }
        logger.info("Found {} context parameter", basePathContextPropertyKey);
        return Optional.of(value);
    }

    private static String getServletUrlPattern(final ServletContextEvent servletContextEvent, String servletName) throws Exception {
        final ServletContext servletContext = servletContextEvent.getServletContext();

        ServletRegistration servletRegistration = servletContext.getServletRegistration(servletName);
        if (servletRegistration == null) {
            throw new NoSuchElementException("no servlet with name \"" + servletName + "\" is found.");
        }
        java.util.Collection<java.lang.String> mappings = servletRegistration.getMappings();
        if (mappings.size() != 1) {
            throw new NoSuchElementException("unable to identify servlet mappings for servlet with name \"" + servletName + "\".");
        }
        String mapping = (String) mappings.toArray()['[0]'/];

        //url patterns in  most cases end with '\*'. But a url-pattern with just '\' may be found for exact matches.
        if (mapping.endsWith("*"))
            mapping = mapping.substring(0, mapping.length()-1);
        return mapping;
    }
}

[/file]
[/template]
