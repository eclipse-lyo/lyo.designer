[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module generateServiceProviderService('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::jspServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderCatalogServices/]

[template public generateCopyright(aServiceProvider : ServiceProvider)]
// [protected ('Copyright')]
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// [/protected]
[/template]

[template public generateImports(aServiceProvider : ServiceProvider)]
import java.io.IOException;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response.Status;

import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Service;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;

import [javaClassFullNameForAdaptorManager(containingAdaptorInterface(aServiceProvider)) /];
import [javaClassFullNameForSingleton(containingServiceProviderCatalog(aServiceProvider)) /];

// [protected ('imports')]
// [/protected]
[/template]

[template public getServiceProviders(aServiceProvider : ServiceProvider)]
/**
 * RDF/XML, XML and JSON representations of an OSLC Service Provider collection
 * @return
 */
@OslcDialog
(
     title = "Service Provider Selection Dialog",
     label = "Service Provider Selection Dialog",
     uri = "",
     hintWidth = "1000px",
     hintHeight = "600px",
     resourceTypes = {OslcConstants.TYPE_SERVICE_PROVIDER},
     usages = {OslcConstants.OSLC_USAGE_DEFAULT}
)
@OslcQueryCapability
(
     title = "Service Provider Query Capability",
     label = "Service Provider Query",
     resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + OslcConstants.PATH_SERVICE_PROVIDER,
     resourceTypes = {OslcConstants.TYPE_SERVICE_PROVIDER},
     usages = {OslcConstants.OSLC_USAGE_DEFAULT}
)
@GET
[JAXRSPathAnnotation(aServiceProvider.collectionURISegment()) /]
[annotationProducesRDF(aServiceProvider.containingAdaptorInterface()) /]
public ServiceProvider[ '[' /][ ']' /] getServiceProviders()
{
    httpServletResponse.addHeader("Oslc-Core-Version","2.0");
    return [javaClassNameForSingleton(containingServiceProviderCatalog(aServiceProvider)) /].getServiceProviders(httpServletRequest);
}
[/template]

[template public getServiceProviderAsRdf(aServiceProvider : ServiceProvider)]
/**
 * RDF/XML, XML and JSON representations of a single OSLC Service Provider
 *
 * @param serviceProviderId
 * @return
 */
@GET
[JAXRSPathAnnotation(aServiceProvider.instanceURISegment()) /]
[annotationProducesRDF(aServiceProvider.containingAdaptorInterface()) /]
public ServiceProvider getServiceProvider([commaSeparate(aServiceProvider.instanceJAXRSMethodSignature(), false, false)/])
{
    httpServletResponse.addHeader("Oslc-Core-Version","2.0");
    return [javaClassNameForSingleton(containingServiceProviderCatalog(aServiceProvider)) /].get[aServiceProvider.javaName(true)/](httpServletRequest[commaSeparate(aServiceProvider.instanceMethodParameterList(), true, false)/]);
}
[/template]

[template public getServiceProviderAsHtml(aServiceProvider : ServiceProvider)]
/**
 * HTML representation of a single OSLC Service Provider
 *
 * Forwards to serviceprovider_html.jsp to create the html document
 *
 * @param serviceProviderId
 */
@GET
[JAXRSPathAnnotation(aServiceProvider.instanceURISegment()) /]
@Produces(MediaType.TEXT_HTML)
public void getHtmlServiceProvider([commaSeparate(instanceJAXRSMethodSignature(aServiceProvider), false, false)/]) throws ServletException, IOException
{
    ServiceProvider serviceProvider = [javaClassNameForSingleton(containingServiceProviderCatalog(aServiceProvider)) /].get[aServiceProvider.javaName(true)/](httpServletRequest[commaSeparate(aServiceProvider.instanceMethodParameterList(), true, false)/]);
    Service [ '[' /][ ']' /] services = serviceProvider.getServices();

    httpServletRequest.setAttribute("serviceProvider", serviceProvider);
    httpServletRequest.setAttribute("services", services);
    // [protected ('getHtmlServiceProvider_setAttributes')]
    // [/protected]

    RequestDispatcher rd = httpServletRequest.getRequestDispatcher("[serviceProviderJspRelativeFileName(aServiceProvider) /]");
    rd.forward(httpServletRequest, httpServletResponse);
    return;
}
[/template]

[template public generateServiceProviderService(aServiceProvider : ServiceProvider)]
[file (javaClassFullFileNameForService(aServiceProvider), false, 'UTF-8')]
[let anAdaptorInterface: AdaptorInterface = containingAdaptorInterface(aServiceProvider)]
[generateCopyright(aServiceProvider)/]

package [javaClassPackageNameForService(aServiceProvider) /];

[generateImports(aServiceProvider)/]

@OslcService(OslcConstants.OSLC_CORE_DOMAIN)
[JAXRSPathAnnotation(aServiceProvider.serviceBaseURI())/]
public class [javaClassNameForService(aServiceProvider) /]
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;

    [getServiceProviders(aServiceProvider)/]

    [getServiceProviderAsRdf(aServiceProvider)/]

    [getServiceProviderAsHtml(aServiceProvider)/]
}
[/let]
[/file]
[/template]
