[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module generateCredentialsFilter('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::domainSpecificationServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::webServiceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderCatalogServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::osgiServices/]

[template public generateCredentialsFilter(anAdaptorInterface : AdaptorInterface)]
[if (anAdaptorInterface.authenticationEnabled())]
[file (anAdaptorInterface.javaClassFullFileNameForCredentialsFilter(), false, 'UTF-8')]
// [protected ('Copyright')]
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// [/protected]

package [anAdaptorInterface.javaClassPackageNameForCredentialsFilter() /];

import java.io.IOException;
import java.util.Enumeration;
import java.util.AbstractMap.SimpleEntry;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.oauth.OAuth;
import net.oauth.OAuthException;
import net.oauth.OAuthMessage;
import net.oauth.OAuthProblemException;
import net.oauth.server.OAuthServlet;

import org.eclipse.lyo.server.oauth.consumerstore.FileSystemConsumerStore;
import org.eclipse.lyo.server.oauth.core.OAuthConfiguration;
import org.eclipse.lyo.server.oauth.core.OAuthRequest;
import org.eclipse.lyo.server.oauth.core.token.SimpleTokenStrategy;
import org.eclipse.lyo.server.oauth.core.AuthenticationException;

import [anAdaptorInterface.javaClassFullNameForAuthenticationApplication()/];

// [protected ('imports')]
// [/protected]

// [protected ('pre_class_code')]
// [/protected]

public class [anAdaptorInterface.javaClassNameForCredentialsFilter() /] implements Filter {
    private final static Logger log = LoggerFactory.getLogger([anAdaptorInterface.javaClassNameForCredentialsFilter() /].class);

    //For debugging, it might be convenient sometimes to deactivate oauth authentication. By enabling this flag, all http requests are no longer protected.
    private static Boolean ignoreResourceProtection = false;
    // [protected ('override_ignoreResourceProtection')]
    // [/protected]

    // [protected ('class_attributes')]
    // [/protected]

    // [protected ('class_methods')]
    // [/protected]

    /**
     * Check if the resource is protected
     * 
     * @return true - the resource is protected, otherwise false
     */
    private boolean isProtectedResource(HttpServletRequest httpRequest) {
        if (ignoreResourceProtection) {
            return false;
        }
        String pathInfo = httpRequest.getPathInfo();

        //'protectedResource' defines the basic set of requests that needs to be protected. 
        //You can override this defintion in the user protected code block below.
        boolean protectedResource = !pathInfo.startsWith("/rootservices") && !pathInfo.startsWith("/oauth");
        // [protected ('isProtectedResource')]
        // [/protected]
        return protectedResource;
    }

    @Override
    public void destroy() {
    }

    /**
     * Check for OAuth or BasicAuth credentials and challenge if not found.
     * 
     * Store the application connection in the HttpSession for retrieval in the REST services.
     */
    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)
            throws IOException, ServletException {

        if (servletRequest instanceof HttpServletRequest && servletResponse instanceof HttpServletResponse) {
            HttpServletRequest request = (HttpServletRequest) servletRequest;
            HttpServletResponse response = (HttpServletResponse) servletResponse;

            if (isProtectedResource(request)) {
                [anAdaptorInterface.javaClassNameForAuthenticationApplication()/] authenticationApplication = [anAdaptorInterface.javaClassNameForAuthenticationApplication()/].getApplication();
                // [protected ('doFilter_protectedResource_init')]
                // [/protected]
                
                //Check if this is an OAuth1 request.
                //String clientRequestURL = UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path(request.getPathInfo()).build().toString();
                OAuthMessage message = OAuthServlet.getMessage(request, null);
                // [protected ('checkOauth1_Init')]
                // [/protected]
                log.trace(request.getPathInfo() + " - checking for oauth1 authentication");
                if (message.getToken() != null) {
                    log.trace(request.getPathInfo() + " - Found an oauth1 token. Validating it.");
                    try {
                        OAuthRequest oAuthRequest = new OAuthRequest(request);
                        oAuthRequest.validate();
                        String applicationConnector = authenticationApplication.getApplicationConnector(message.getToken());
                        if (applicationConnector == null) {
                            // [protected ('checkOauth1_applicationConnectorNull')]
                            // [/protected]
                            log.trace(request.getPathInfo() + " - oauth1 authentication not valid. Raising an exception TOKEN_REJECTED");
                            throw new OAuthProblemException(OAuth.Problems.TOKEN_REJECTED);
                        }
                        log.trace(request.getPathInfo() + " - oauth1 authentication is valid. Done.");
                        authenticationApplication.bindApplicationConnectorToSession(request, applicationConnector);
                    } catch (OAuthException e) {
                        // [protected ('checkOauth1_exception')]
                        // [/protected]
                        OAuthServlet.handleException(response, e, [anAdaptorInterface.javaClassNameForAuthenticationApplication()/].OAUTH_REALM);
                        return;
                    }
                } 
                else {
                    // This is not an OAuth request, so check for authentication in the session
                    // [protected ('checkSession_Init')]
                    // [/protected]
                    log.trace(request.getPathInfo() + " - checking for authentication in the session");
                    String applicationConnector = authenticationApplication.getApplicationConnectorFromSession(request);
                    if (null != applicationConnector) {
                        log.trace(request.getPathInfo() + " - session authentication done");
                        // [protected ('checkSession_Final')]
                        // [/protected]
                    } else {
                        // [protected ('basicAuth_Init')]
                        // [/protected]
                        log.trace(request.getPathInfo() + " - checking for basic authentication");
                        // [protected ('basicAuth_nullConnector')]
                        // [/protected]
                        try {
                            //Check for basic authentication
                            Optional<SimpleEntry> basicAuthenticationFromRequest = authenticationApplication.getBasicAuthenticationFromRequest(request);
                            if (basicAuthenticationFromRequest.isEmpty()) {
                                log.trace(request.getPathInfo() + " - no authentication identified. Throwing an exception");
                                throw new AuthenticationException("No or invalid basic authentication header identified in request.");
                            } else {
                                log.trace(request.getPathInfo() + " - basic authentication done");
                                // [protected ('basicAuth_Final')]
                                // [/protected]
                            }
                        } catch (AuthenticationException e) {
                            // [protected ('basicAuth_authenticationException')]
                            // [/protected]
                            authenticationApplication.sendUnauthorizedResponse(request, response, e);
                            return;
                        } 
                    }
                    // [protected ('basicAuth_final')]
                    // [/protected]
                }
            // [protected ('doFilter_protectedResource_final')]
            // [/protected]
            } else {
                // [protected ('doFilter_notProtectedResource')]
                // [/protected]
            }
        }
        chain.doFilter(servletRequest, servletResponse);
    }

    @Override
    public void init(FilterConfig arg0) throws ServletException {
        OAuthConfiguration config = OAuthConfiguration.getInstance();
        [anAdaptorInterface.javaClassNameForAuthenticationApplication()/] authenticationApplication = [anAdaptorInterface.javaClassNameForAuthenticationApplication()/].getApplication();

        // Validates a user's ID and password.
        config.setApplication(authenticationApplication);

        // [protected ('init')]
        // [/protected]

        /*
         * Override some SimpleTokenStrategy methods so that we can keep the
         * BugzillaConnection associated with the OAuth tokens.
         */
        config.setTokenStrategy(new SimpleTokenStrategy() {
            @Override
            public void markRequestTokenAuthorized(HttpServletRequest httpRequest, String requestToken)
                    throws OAuthProblemException {
                // [protected ('markRequestTokenAuthorized_init')]
                // [/protected]
                authenticationApplication.putApplicationConnector(requestToken, authenticationApplication.getApplicationConnectorFromSession(httpRequest));
                // [protected ('markRequestTokenAuthorized_mid')]
                // [/protected]
                super.markRequestTokenAuthorized(httpRequest, requestToken);
                // [protected ('markRequestTokenAuthorized_final')]
                // [/protected]
            }

            @Override
            public void generateAccessToken(OAuthRequest oAuthRequest) throws OAuthProblemException, IOException {
                // [protected ('generateAccessToken_init')]
                // [/protected]
                String requestToken = oAuthRequest.getMessage().getToken();
                // [protected ('generateAccessToken_mid')]
                // [/protected]
                super.generateAccessToken(oAuthRequest);
                authenticationApplication.moveApplicationConnector(requestToken, oAuthRequest.getAccessor().accessToken);
                // [protected ('generateAccessToken_final')]
                // [/protected]
            }
        });

        try {
            // For now, hard-code the consumers.
            config.setConsumerStore(new FileSystemConsumerStore(authenticationApplication.getOslcConsumerStoreFilename()));
        } catch (Throwable t) {
            log.error("Error initializing the OAuth consumer store: " + t.getMessage());
        }
    }
}
[/file]
[/if]
[/template]
