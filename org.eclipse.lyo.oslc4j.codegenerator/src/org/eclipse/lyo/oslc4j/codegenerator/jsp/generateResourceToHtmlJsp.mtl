[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module generateResourceToHtmlJsp('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::jspServices/]

[template public generateResourceToHtmlJsp(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
[if (contextAdaptorInterface.generateJspFile(resourceToHtmlJspFullFileName(aResource, contextAdaptorInterface)))]
[file (resourceToHtmlJspFullFileName(aResource, contextAdaptorInterface), false, 'UTF-8')]
<%--To avoid the overriding of any manual code changes upon subsequent code generations, disable "Generate JSP Files" option in the Adaptor model.--%>
<%--
 Copyright (c) 2020 Contributors to the Eclipse Foundation
 
 See the NOTICE file(s) distributed with this work for additional
 information regarding copyright ownership.
 
 This program and the accompanying materials are made available under the
 terms of the Eclipse Distribution License 1.0 which is available at
 http://www.eclipse.org/org/documents/edl-v10.php.
 
 SPDX-License-Identifier: BSD-3-Simple

 This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
--%>

<%@page import="[javaClassFullName(aResource, contextAdaptorInterface, null) /]"%>
<%@page import="java.net.URI"%>
<%
String asLocalResource = request.getParameter("asLocalResource");
[javaClassName(aResource)/] aResource = null;
if (request.getParameter("resourceUri") != null) {
    aResource = new [javaClassName(aResource)/] (new URI(request.getParameter("resourceUri")));
}
else {
    if (request.getAttribute("a[javaName(aResource, true)/]") != null) {
        aResource = ([javaClassName(aResource)/]) request.getAttribute("a[javaName(aResource, true)/]");
    }
}

if (asLocalResource != null && asLocalResource.equalsIgnoreCase("true")) {
    out.write("{a Local [javaClassName(aResource)/] Resource} - update [javaClassName(aResource)/].toString() to present resource as desired.");
}
else {
    if (aResource == null) {
        out.write("<em>null</em>");
    }
    else {    
        out.write("<a href=\"" + aResource.getAbout() + "\" class=\"oslc-resource-link\">" + aResource.getAbout() + "</a>");
    }
}
%>
[/file]
[/if]
[/template]
