[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module generateResourceShapeService('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::jspServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]

[template public generateResourceShapeService(anAdaptorInterface : AdaptorInterface)]
[file (javaClassFullFileNameForResourceShapeService(anAdaptorInterface), false, 'UTF-8')]
// [protected ('Copyright')]
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// [/protected]

package [javaClassPackageNameForResourceShapeService(anAdaptorInterface) /];

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.URISyntaxException;
import java.util.Map;
import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.Response.Status;
import jakarta.ws.rs.core.UriInfo;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

[if (anAdaptorInterface.swaggerDocumentationEnabled())]
import io.swagger.v3.oas.annotations.Operation;
[/if]
import [javaClassFullNameForAdaptorApplication(anAdaptorInterface)/];

// [protected ('imports')]
// [/protected]

// [protected ('pre_class_code')]
// [/protected]

@Path(OslcConstants.PATH_RESOURCE_SHAPES)
public class [javaClassNameForResourceShapeService(anAdaptorInterface)/]
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;
    @Context private UriInfo uriInfo;
    @Context private jakarta.ws.rs.core.Application jaxrsApplication; 

    private static final Logger log = LoggerFactory.getLogger([javaClassNameForResourceShapeService(anAdaptorInterface)/].class.getName());

    public [javaClassNameForResourceShapeService(anAdaptorInterface)/]() throws OslcCoreApplicationException, URISyntaxException {
        super();
    }

    @GET
    @Path("{resourceShapePath}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.TEXT_XML, OslcMediaType.APPLICATION_JSON, OslcMediaType.TEXT_TURTLE})
    [if (anAdaptorInterface.swaggerDocumentationEnabled())
    ]    @Operation(hidden = true)
    [/if]
    public ResourceShape getResourceShape(@Context                        final HttpServletRequest httpServletRequest,
                                          @PathParam("resourceShapePath") final String             resourceShapePath)
           throws OslcCoreApplicationException,
                  URISyntaxException
    {
        final Class<?> resourceClass = [javaClassNameForAdaptorApplication(anAdaptorInterface)/].getResourceShapePathToResourceClassMap().get(resourceShapePath);
        if (resourceClass != null) {
            final String servletUri = OSLC4JUtils.resolveServletUri(httpServletRequest);
            return ResourceShapeFactory.createResourceShape(servletUri, OslcConstants.PATH_RESOURCE_SHAPES,
                    resourceShapePath, resourceClass);
        }
        throw new WebApplicationException(Response.Status.NOT_FOUND);
    }

    @GET
    @Path("{resourceShapePath}")
    @Produces({ MediaType.TEXT_HTML })
    public void getResourceShapeAsHtml(
            @PathParam("resourceShapePath") final String resourceShapePath
        ) throws ServletException, IOException, URISyntaxException, OslcCoreApplicationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException
    {
        final Class<?> resourceClass = [javaClassNameForAdaptorApplication(anAdaptorInterface) /].getResourceShapePathToResourceClassMap().get(resourceShapePath);
        ResourceShape aResourceShape = null;
        
        if (resourceClass != null)
        {
            aResourceShape = (ResourceShape) resourceClass.getMethod("createResourceShape").invoke(null);
            httpServletRequest.setAttribute("aResourceShape", aResourceShape);
            
            RequestDispatcher rd = httpServletRequest.getRequestDispatcher("[resourceShapeJspRelativeFileName(anAdaptorInterface) /]");
            rd.forward(httpServletRequest,httpServletResponse);
            return;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }
}
[/file]
[/template]
