[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *
 *******************************************************************************/
/]

[module jspServices('http://org.eclipse.lyo/oslc4j/adaptorInterface')/]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::fileServices/]

[query public generateJspFile(anAdaptorInterface : AdaptorInterface, filePath : String) : Boolean = 
    not (anAdaptorInterface.doNotRegenerateJspFiles()._and(fileExists(filePath)))
/]

[query private resourceCollectionJspSimpleFileName(aQueryCapability: QueryCapability) : String =
(if (aQueryCapability.usages->size() = 0) then
    concatenate(aQueryCapability.resourceTypes.javaName(true)->sep('', 'sAnd', 's').oclAsType(String)).toLower()
else
    javaSimpleStringFromUri(aQueryCapability.usages->first(), true)
endif)
.concat('collection').concat('.jsp')
/]
[query public resourceCollectionJspRelativeFileName(aQueryCapability: QueryCapability) : String =
webFilesWebappPath(containingAdaptorInterface(aQueryCapability)).concatenatePaths(resourceCollectionJspSimpleFileName(aQueryCapability)).toLower()
/]
[query public resourceCollectionJspFullFileName(aQueryCapability: QueryCapability) : String =
webFilesBasePath(containingAdaptorInterface(aQueryCapability)).concatenatePaths(resourceCollectionJspRelativeFileName(aQueryCapability))
/]

[query public resourceToHtmlJspRelativeFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String =
webFilesWebappPath(anAdaptorInterface).concatenatePaths(aResource.javaName(true)).concat('ToHtml').concat('.jsp').toLower()
/]
[query public resourceToHtmlJspFullFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String =
webFilesBasePath(anAdaptorInterface).concatenatePaths(resourceToHtmlJspRelativeFileName(aResource, anAdaptorInterface))
/]

[query public getResourceJspRelativeFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String =
webFilesWebappPath(anAdaptorInterface).concatenatePaths(aResource.javaName(true)).concat('.jsp').toLower()
/]
[query public getResourceJspFullFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String =
webFilesBasePath(anAdaptorInterface).concatenatePaths(getResourceJspRelativeFileName(aResource, anAdaptorInterface))
/]

[query public getResourceSmallPreviewJspRelativeFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String =
webFilesWebappPath(anAdaptorInterface).concatenatePaths(aResource.javaName(true)).concat('smallpreview.jsp').toLower()
/]
[query public getResourceSmallPreviewJspFullFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String =
webFilesBasePath(anAdaptorInterface).concatenatePaths(getResourceSmallPreviewJspRelativeFileName(aResource, anAdaptorInterface))
/]

[query public getResourceLargePreviewJspRelativeFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String =
webFilesWebappPath(anAdaptorInterface).concatenatePaths(aResource.javaName(true)).concat('largepreview.jsp').toLower()
/]
[query public getResourceLargePreviewJspFullFileName(aResource: Resource, anAdaptorInterface : AdaptorInterface) : String =
webFilesBasePath(anAdaptorInterface).concatenatePaths(getResourceLargePreviewJspRelativeFileName(aResource, anAdaptorInterface))
/]

[query private resourceCreatorJspSimpleFileName(aCreationDialog: Dialog) : String =
(if (aCreationDialog.usages->size() = 0) then
    concatenate(aCreationDialog.resourceTypes.javaName(true)->sep('', 'And', '').oclAsType(String)).toLower()
else
    javaSimpleStringFromUri(aCreationDialog.usages->first(), true)
endif)
.concat('creator').concat('.jsp')
/]
[query public resourceCreatorJspRelativeFileName(aCreationDialog: Dialog) : String =
webFilesWebappPath(containingAdaptorInterface(aCreationDialog)).concatenatePaths(resourceCreatorJspSimpleFileName(aCreationDialog)).toLower()
/]
[query public resourceCreatorJspFullFileName(aCreationDialog: Dialog) : String =
webFilesBasePath(containingAdaptorInterface(aCreationDialog)).concatenatePaths(resourceCreatorJspRelativeFileName(aCreationDialog))
/]

[query private resourceSelectorJspSimpleFileName(aSelectionDialog: Dialog) : String =
(if (aSelectionDialog.usages->size() = 0) then
    concatenate(aSelectionDialog.resourceTypes.javaName(true)->sep('', 'And', '').oclAsType(String)).toLower()
else
    javaSimpleStringFromUri(aSelectionDialog.usages->first(), true)
endif)
.concat('selector').concat('.jsp')
/]
[query public resourceSelectorJspRelativeFileName(aSelectionDialog: Dialog) : String =
webFilesWebappPath(containingAdaptorInterface(aSelectionDialog)).concatenatePaths(resourceSelectorJspSimpleFileName(aSelectionDialog)).toLower()
/]
[query public resourceSelectorJspFullFileName(aSelectionDialog: Dialog) : String =
webFilesBasePath(containingAdaptorInterface(aSelectionDialog)).concatenatePaths(resourceSelectorJspRelativeFileName(aSelectionDialog))
/]

[query public resourceSelectorClientJspRelativeFileName(anAdaptorInterface : AdaptorInterface) : String =
webFilesWebappPath(anAdaptorInterface).concatenatePaths('selectionDialogSampleClient').concat('.jsp').toLower()
/]
[query public resourceSelectorClientJspFullFileName(anAdaptorInterface : AdaptorInterface) : String =
webFilesBasePath(anAdaptorInterface).concatenatePaths(resourceSelectorClientJspRelativeFileName(anAdaptorInterface))
/]

[query public resourceCreatorClientJspRelativeFileName(anAdaptorInterface : AdaptorInterface) : String =
webFilesWebappPath(anAdaptorInterface).concatenatePaths('creationDialogSampleClient').concat('.jsp').toLower()
/]
[query public resourceCreatorClientJspFullFileName(anAdaptorInterface : AdaptorInterface) : String =
webFilesBasePath(anAdaptorInterface).concatenatePaths(resourceCreatorClientJspRelativeFileName(anAdaptorInterface))
/]

[query public resourceShapeJspRelativeFileName(anAdaptorInterface : AdaptorInterface) : String =
webFilesWebappPath(anAdaptorInterface).concatenatePaths('resourceShape').concat('.jsp').toLower()
/]

[query public resourceShapeJspFullFileName(anAdaptorInterface : AdaptorInterface) : String =
webFilesBasePath(anAdaptorInterface).concatenatePaths(resourceShapeJspRelativeFileName(anAdaptorInterface))
/]

[query private resourceSelectorResultsJspSimpleFileName(aSelectionDialog: Dialog) : String =
(if (aSelectionDialog.usages->size() = 0) then
    concatenate(aSelectionDialog.resourceTypes.javaName(true)->sep('', 'And', '').oclAsType(String)).toLower()
else
    javaSimpleStringFromUri(aSelectionDialog.usages->first(), true)
endif)
.concat('selectorResults').concat('.jsp')
/]
[query public resourceSelectorResultsJspRelativeFileName(aSelectionDialog: Dialog) : String =
webFilesWebappPath(containingAdaptorInterface(aSelectionDialog)).concatenatePaths(resourceSelectorResultsJspSimpleFileName(aSelectionDialog)).toLower()
/]
[query public resourceSelectorResultsJspFullFileName(aSelectionDialog: Dialog) : String =
webFilesBasePath(containingAdaptorInterface(aSelectionDialog)).concatenatePaths(resourceSelectorResultsJspRelativeFileName(aSelectionDialog))
/]

[query public serviceProviderCatalogJspRelativeFileName(aServiceProviderCatalog : ServiceProviderCatalog) : String =
webFilesWebappPath(containingAdaptorInterface(aServiceProviderCatalog)).concatenatePaths('serviceProviderCatalog').concat('.jsp').toLower()
/]
[query public serviceProviderCatalogJspFullFileName(aServiceProviderCatalog : ServiceProviderCatalog) : String =
webFilesBasePath(containingAdaptorInterface(aServiceProviderCatalog)).concatenatePaths(serviceProviderCatalogJspRelativeFileName(aServiceProviderCatalog))
/]

[query public serviceProviderJspRelativeFileName(aServiceProvider : ServiceProvider) : String =
webFilesWebappPath(containingAdaptorInterface(aServiceProvider)).concatenatePaths(aServiceProvider.javaName(false)).concat('.jsp').toLower()
/]
[query public serviceProviderJspFullFileName(aServiceProvider : ServiceProvider) : String =
webFilesBasePath(containingAdaptorInterface(aServiceProvider)).concatenatePaths(serviceProviderJspRelativeFileName(aServiceProvider))
/]

[comment TODO: I need to work out how to properly set hte javascript path. This is hard-coded :-)/]
[query public delegatedUIJavaScriptsRelativeFileName(anAdaptorInterface : AdaptorInterface) : String =
'delegated-ui'.concat('.js')
/]
[query public delegatedUIJavaScriptsFullFileName(anAdaptorInterface : AdaptorInterface) : String =
webFilesBasePath(anAdaptorInterface).concatenatePaths('static/js').concatenatePaths(delegatedUIJavaScriptsRelativeFileName(anAdaptorInterface))
/]

[comment swagger/]
[query public swaggerIndexJspRelativeFileName(anAdaptorInterface : AdaptorInterface) : String =
'/swagger-ui/index'.concat('.jsp').toLower()
/]
[query public swaggerIndexJspFullFileName(anAdaptorInterface : AdaptorInterface) : String =
webFilesBasePath(anAdaptorInterface).concatenatePaths(swaggerIndexJspRelativeFileName(anAdaptorInterface))
/]
