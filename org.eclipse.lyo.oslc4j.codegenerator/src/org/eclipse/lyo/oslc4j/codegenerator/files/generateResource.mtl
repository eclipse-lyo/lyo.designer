[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       -  initial API and implementation
 *     Alberto Giammaria    -  initial API and implementation
 *     Chris Peters         -  initial API and implementation
 *     Gianluca Bernardini  -  initial API and implementation
 *     Sam Padgett          -  initial API and implementation
 *     Michael Fiedler      -  adapted for OSLC4J
 *     Jad El-khoury        -  initial implementation of code generator (422448)
 *     Matthieu Helleboid   -  Support for multiple Service Providers.
 *     Anass Radouani       -  Support for multiple Service Providers.
 *     Frédéric Loiret      -  Minor changes for Bootstrap template (519699)
 *******************************************************************************/
/]

[module generateResource('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourcePropertyServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::domainSpecificationServices/]

[template public resourcePropertyAsTextInputForCreation(aProperty: ResourceProperty)]
"<input name=\"[javaName(aProperty, false)/]\" type=\"text\" style=\"width: 400px\" id=\"[javaName(aProperty, false)/]\" [if (Sequence{'excatlyOne', 'oneOrMany'}->includes(aProperty.occurs.toString()))]required[/if]>"
[/template]

[template public generateClassHeader(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
// [protected ('Copyright')]
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// [/protected]
[/template]

[template public generatePackageDeclaration(aResource : Resource, contextAdaptorInterface : AdaptorInterface, defaultJavaClassPackageName : String)]
package [javaClassPackageName(aResource, contextAdaptorInterface, defaultJavaClassPackageName) /];
[/template]

[template public generateImports(aResource : Resource, contextAdaptorInterface : AdaptorInterface, defaultJavaClassPackageName : String)]
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import [javaInterfaceFullNameForConstants(aResource.definingDomainSpecification(), contextAdaptorInterface, defaultJavaClassPackageName)/];
[if (not aResource.directParentResource().oclIsUndefined())]import [javaClassFullName(aResource.directParentResource(), contextAdaptorInterface, defaultJavaClassPackageName) /];[/if]
[for (r: Resource | aResource.interfaceResources()->sortedBy(name)) separator(lineSeparator())]import [javaInterfaceFullName(r, contextAdaptorInterface, defaultJavaClassPackageName) /];[/for]
[for (aDomainSpecification: DomainSpecification | (aResource.resourceProperties->union(aResource.interfaceProperties()->asSet())->collect(p: ResourceProperty | Set{p.definingDomainSpecification()}->union(p.range.definingDomainSpecification()->asSet())))->flatten()->asSet()->sortedBy(name)) separator(lineSeparator())]import [javaInterfaceFullNameForConstants(aDomainSpecification, contextAdaptorInterface, defaultJavaClassPackageName) /];[/for]
[for (aProperty: ResourceProperty | allProperties(aResource)->sortedBy(name))]
[if(Sequence{'Resource', 'LocalResource'}->includes(aProperty.valueType.toString())) ]
[for (r: Resource | aProperty.range)]
import [javaClassFullName(r, contextAdaptorInterface, defaultJavaClassPackageName) /];
[/for]
[/if]
[/for]

// [protected ('imports')]
// [/protected]
[/template]

[template public generatePreClassCode(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
// [protected ('preClassCode')]
// [/protected]
[/template]

[template public generateClassAnnotations(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
// [protected ('classAnnotations')]
// [/protected]
[namespaceAnnotation(aResource)/]
[nameAnnotation(aResource)/]
[resourceShapeAnnotation(aResource)/]
[/template]

[template public generateClassDeclaration(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
public class [javaClassName(aResource) /]
    extends [if (aResource.directParentResource().oclIsUndefined())]AbstractResource[else][javaClassName(aResource.directParentResource()) /][/if]
    implements [javaInterfaceName(aResource)/][if aResource.interfaceResources()->size() > 0], [for (aResourceToInterface: Resource | aResource.interfaceResources()->sortedBy(name)) separator(', ')][javaInterfaceName(aResourceToInterface) /][/for][/if]
[/template]

[template public generateInstanceAttributes(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
[for (aProperty: ResourceProperty | ((aResource.resourceProperties->asSequence())->union(interfaceProperties(aResource))))]
// [protected ('attributeAnnotation:'.concat(javaAttributeName(aProperty, aResource)))]
// [/protected]
private [javaAttributeTypeDeclaration(aProperty) /] [javaAttributeName(aProperty, aResource)/][javaAttributeInitialConstruction(aProperty)/];
[/for]
[/template]

[template public generateClassAttributes(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
// [protected ('classAttributes')]
// [/protected]
[/template]

[template public generateClassMethods(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
// [protected ('classMethods')]
// [/protected]
[/template]

[template public generateConstructors(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
public [javaClassName(aResource) /]()
{
    super();

    // [protected ('constructor1')]
    // [/protected]
}

public [javaClassName(aResource) /](final URI about)
{
    super(about);

    // [protected ('constructor2')]
    // [/protected]
}

[/template]

[template public generateResourceShapeMethods(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
    return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
    OslcConstants.PATH_RESOURCE_SHAPES,
    [javaInterfaceNameForConstants(aResource.definingDomainSpecification())/].[resourcePathConstantName(aResource)/],
    [javaClassName(aResource) /].class);
}


[/template]


[template public generateToStringMethods(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
public String toString()
{
    return toString(false);
}

public String toString(boolean asLocalResource)
{
    String result = "";
    // [protected ('toString_init')]
    // [/protected]

    if (asLocalResource) {
        result = result + "{a Local [aResource.name.toUpperFirst() /] Resource} - update [aResource.name.toUpperFirst() /].toString() to present resource as desired.";
        // [protected ('toString_bodyForLocalResource')]
        // [/protected]
    }
    else {
        result = String.valueOf(getAbout());
    }

    // [protected ('toString_finalize')]
    // [/protected]

    return result;
}

[/template]

[template public generateAddToAttributeMethods(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
[for (aProperty: ResourceProperty | ((aResource.resourceProperties->asSequence())->union(interfaceProperties(aResource))))]
    [if (Sequence{'zeroOrMany', 'oneOrMany'}->includes(aProperty.occurs.toString()))]
public void add[javaAttributeName(aProperty, aResource).toUpperFirst()/](final [javaAttributeBaseType(aProperty) /] [javaName(aProperty, false)/])
{
    this.[javaAttributeName(aProperty, aResource) /].add([javaName(aProperty, false)/]);
}

    [/if]
[/for]
[/template]

[template public generateGetters(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
[for (aProperty: ResourceProperty | ((aResource.resourceProperties->asSequence())->union(interfaceProperties(aResource))))]
// [protected ('getterAnnotation:'.concat(javaAttributeName(aProperty, aResource)))]
// [/protected]
[if (not (nameAnnotation(aProperty) = ''))]
[nameAnnotation(aProperty)/]
[/if]
[if (not (propertyDefinitionAnnotation(aProperty, aResource, contextAdaptorInterface) = ''))]
[propertyDefinitionAnnotation(aProperty, aResource, contextAdaptorInterface)/]
[/if]
[if (not (descriptionAnnotation(aProperty) = ''))]
[descriptionAnnotation(aProperty)/]
[/if]
[if (not (occursAnnotation(aProperty) = ''))]
[occursAnnotation(aProperty)/]
[/if]
[if (not (valueTypeAnnotation(aProperty) = ''))]
[valueTypeAnnotation(aProperty)/]
[/if]
[if (not (representationAnnotation(aProperty) = ''))]
[representationAnnotation(aProperty)/]
[/if]
[if (not (rangeAnnotation(aProperty, aResource, contextAdaptorInterface)= ''))]
[rangeAnnotation(aProperty, aResource, contextAdaptorInterface)/]
[/if]
[if (not (readOnlyAnnotation(aProperty) = ''))]
[readOnlyAnnotation(aProperty)/]
[/if]
[if (not (titleAnnotation(aProperty)= ''))]
[titleAnnotation(aProperty)/]
[/if]
[if (not (isMemberPropertyAnnotation(aProperty)= ''))]
[isMemberPropertyAnnotation(aProperty)/]
[/if]
[if (not (allowedValueAnnotation(aProperty)= ''))]
[allowedValueAnnotation(aProperty)/]
[/if]
public [javaAttributeTypeDeclaration(aProperty) /] [javaAttributeGetterMethodName(aProperty, aResource)/]()
{
    // [protected ('getterInit:'.concat(javaAttributeName(aProperty, aResource)))]
    // [/protected]
    return [javaAttributeName(aProperty, aResource) /];
}

[/for]
[/template]

[template public generateSetters(aResource : Resource, contextAdaptorInterface : AdaptorInterface)]
[for (aProperty: ResourceProperty | ((aResource.resourceProperties->asSequence())->union(interfaceProperties(aResource))))]
// [protected ('setterAnnotation:'.concat(javaAttributeName(aProperty, aResource)))]
// [/protected]
public void [javaAttributeSetterMethodName(aProperty, aResource)/](final [javaAttributeTypeDeclaration(aProperty) /] [javaName(aProperty, false)/] )
{
    // [protected ('setterInit:'.concat(javaAttributeName(aProperty, aResource)))]
    // [/protected]
[if (Sequence{'zeroOrMany', 'oneOrMany'}->includes(aProperty.occurs.toString()))]
    this.[javaAttributeName(aProperty, aResource) /].clear();
    if ([javaName(aProperty, false)/] != null)
    {
        this.[javaAttributeName(aProperty, aResource) /].addAll([javaName(aProperty, false)/]);
    }
[else]
    this.[javaAttributeName(aProperty, aResource) /] = [javaName(aProperty, false)/];
[/if]

    // [protected ('setterFinalize:'.concat(javaAttributeName(aProperty, aResource)))]
    // [/protected]
}

[/for]
[/template]

[template public generateResource(aResource : Resource, contextAdaptorInterface : AdaptorInterface, defaultJavaFilesPath : String, defaultJavaClassPackageName : String)]
[file (javaClassFullFileName(aResource, contextAdaptorInterface, defaultJavaFilesPath, defaultJavaClassPackageName), false, 'UTF-8')]
[generateClassHeader(aResource, contextAdaptorInterface)/]

[generatePackageDeclaration(aResource, contextAdaptorInterface, defaultJavaClassPackageName)/]

[generateImports(aResource, contextAdaptorInterface, defaultJavaClassPackageName)/]

[generatePreClassCode(aResource, contextAdaptorInterface)/]

[generateClassAnnotations(aResource, contextAdaptorInterface)/]
[generateClassDeclaration(aResource, contextAdaptorInterface)/]
{
    [generateInstanceAttributes(aResource, contextAdaptorInterface)/]
    [generateClassAttributes(aResource, contextAdaptorInterface)/]
    [generateClassMethods(aResource, contextAdaptorInterface)/]
    [generateConstructors(aResource, contextAdaptorInterface)/]
    [generateResourceShapeMethods(aResource, contextAdaptorInterface)/]
    [generateToStringMethods(aResource, contextAdaptorInterface)/]
    [generateAddToAttributeMethods(aResource, contextAdaptorInterface)/]
    [generateGetters(aResource, contextAdaptorInterface)/]
    [generateSetters(aResource, contextAdaptorInterface)/]
}
[/file]
[/template]
