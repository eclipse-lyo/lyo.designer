[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module domainSpecificationDiagram ('http://org.eclipse.lyo/oslc4j/adaptorInterface', 'http://www.eclipse.org/sirius/diagram/1.1.0', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::lyo::tools::common::utils::ShapeVocabularyUtils/]
[import org::eclipse::lyo::tools::common::utils::PreferencesUtils/]

[query public visibleResources (diagram : DSemanticDiagram) : Sequence(Resource) =
(diagram.containers->select(c : DDiagramElementContainer | (Sequence{'Specification.DomainSpecification.Resource', 'DomainSpecification.Resource'}->includes(c.actualMapping.name))._and(c.visible)))
	.target.oclAsType(Resource)
/]

[query public literalResourceProperties(aResource : Resource) : Set(ResourceProperty) =
aResource.resourceProperties->select(p : ResourceProperty | p.isLiteral())
/]

[query public referenceResourceProperties(aResource : Resource) : Set(ResourceProperty) =
aResource.resourceProperties->select(p : ResourceProperty | not p.isLiteral())
/]

[comment We want to list all literal properties. We also want to list reference properties whose range is not set (since they cannot be shown as an arrow, pointing to nowhere) /]
[query public propertiesAsSubnodes(aResource : Resource) : Set(ResourceProperty) =
aResource.resourceProperties->select(p : ResourceProperty | 
		(p.isLiteral())
		 or ((not p.isLiteral()) and (p.range->size() = 0)))
/]

[comment We want to list reference properties that have range resources not visible in the diagram (since they cannot be shown as an arrow, pointing to nowhere) /]
[query public referencePropertiesAsSubnodes(aResource : Resource, diagram : DSemanticDiagram) : Set(ResourceProperty) =
aResource.referenceResourceProperties()
	->select(p : ResourceProperty | not visibleResources(diagram)->includesAll(p.range))
/]


[comment Always show the prefix, since prefix no longer depend on the domainSpec. It relates to the vocab.
What would the logic look like otherwise /]
[query public labelAsResourceSubnode(aResourceProperty : ResourceProperty, sourceResource : Resource) : String =
(if (aResourceProperty.userPreferenceViewLabelsAsShape())  then 
    (if (aResourceProperty.userPreferenceAlwaysViewPrefixes() or
        not (aResourceProperty.eContainer(DomainSpecification) = sourceResource.eContainer(DomainSpecification))) 
        then aResourceProperty.toString(true, true, true) 
        else aResourceProperty.toString(true, false, true)
    endif)
else 
    (if (aResourceProperty.userPreferenceAlwaysViewPrefixes() or
        not (aResourceProperty.deducePropertyDefinition_namespaceURI() = sourceResource.deduceDescribes_namespaceURI()))
        then aResourceProperty.toString(false, true, true) 
        else aResourceProperty.toString(false, false, true)
    endif)
endif)
/]

[query public labelInDomainSpecification(aResourceProperty : ResourceProperty) : String =
(if (aResourceProperty.userPreferenceViewLabelsAsShape())  then 
    (if (aResourceProperty.userPreferenceAlwaysViewPrefixes() or
        false) 
        then aResourceProperty.toString(true, true, true) 
        else aResourceProperty.toString(true, false, true)
    endif)
else 
    (if (aResourceProperty.userPreferenceAlwaysViewPrefixes() or
        not (aResourceProperty.deducePropertyDefinition_namespaceURI() = aResourceProperty.eContainer(DomainSpecification).deduceVocabulary_namespaceURI())) 
        then aResourceProperty.toString(false, true, true) 
        else aResourceProperty.toString(false, false, true)
    endif)
endif)
/]

[query public labelAtArrowCenter(aResourceProperty : ResourceProperty, sourceResource : Resource) : String =
(if (aResourceProperty.valueType = ResourcePropertyValueType::LocalResource) then 'Local: ' else '' endif)
+
(if (aResourceProperty.userPreferenceViewLabelsAsShape())  then 
    (if (aResourceProperty.userPreferenceAlwaysViewPrefixes() or
        not (aResourceProperty.eContainer(DomainSpecification) = sourceResource.eContainer(DomainSpecification))) 
        then aResourceProperty.toString(true, true, false) 
        else aResourceProperty.toString(true, false, false)
    endif)
else 
    (if (aResourceProperty.userPreferenceAlwaysViewPrefixes() or
        not (aResourceProperty.deducePropertyDefinition_namespaceURI() = sourceResource.deduceDescribes_namespaceURI()))
        then aResourceProperty.toString(false, true, false) 
        else aResourceProperty.toString(false, false, false)
    endif)
endif)
/]

[query public labelAtArrowEnd(aResourceProperty : ResourceProperty) : String =
    aResourceProperty.occurs.toStringNumeric()
/]

[comment If at least one parent resource is not visible in the diagram, show textually the parent resources.
Show at least the first invisible parent resource./]
[query public labelInDomainSpecification(aResource : Resource, diagram : DSemanticDiagram) : String =
let invisibleParentResources : OrderedSet(Resource) = aResource.extends->select(parent : Resource | not(visibleResources(diagram)->includes(parent))) in
(if (aResource.userPreferenceViewLabelsAsShape())  then 
    (if (aResource.userPreferenceAlwaysViewPrefixes() or
        false) 
        then aResource.toString(true, true) 
        else aResource.toString(true, false)
    endif)
else 
    (if (aResource.userPreferenceAlwaysViewPrefixes() or
        not (aResource.deduceDescribes_namespaceURI() = aResource.eContainer(DomainSpecification).deduceVocabulary_namespaceURI())) 
        then aResource.toString(false, true) 
        else aResource.toString(false, false)
    endif)
endif)
+
(if (invisibleParentResources->size() = 0)
then
    ''
else
    (lineSeparator() + 'extends: ' + invisibleParentResources->first().toString(false, true)) +
    (if (invisibleParentResources->size() > 1) then ' & ...' else '' endif)
endif)
/]
