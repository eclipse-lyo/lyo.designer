[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2014 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *    
 *******************************************************************************/
/]

[module services('http://org.eclipse.lyo/oslc4j/adaptorInterface', 'http://org.eclipse.lyo/oslc4j/vocabulary', 'http://www.eclipse.org/emf/2002/Ecore')/]

[query private javaKeywords(traceabilityContext : OclAny) : Set(String) =
Set{'abstract', 'continue', 'for', 'new', 'switch', 'assert', 'default', 'goto', 'package', 'synchronized', 'boolean', 'do',
'if', 'private', 'this', 'break', 'double', 'implements', 'protected', 'throw', 'byte', 'else', 'import', 'public', 'throws',
'case', 'enum', 'instanceof', 'return', 'transient', 'catch', 'extends', 'int', 'short', 'try', 'char', 'final', 'interface',
'static', 'void', 'class', 'finally', 'long', 'strictfp', 'volatile', 'const', 'float', 'native', 'super', 'while'}
/]

[query private javaLangWords(traceabilityContext : OclAny) : Set(String) =
Set{'appendable', 'autocloseable', 'charsequence', 'cloneable', 'comparable', 'iterable', 'readable', 'runnable', 'thread',
'boolean', 'byte', 'character', 'class', 'classloader', 'classvalue', 'compiler', 'double', 'enum', 'float',
'inheritablethreadlocal', 'integer', 'long', 'math', 'number', 'object', 'package', 'process', 'processbuilder',
'runtime', 'runtimepermission', 'securitymanager', 'short', 'stacktraceelement', 'strictmath', 'string', 'stringbuffer',
'stringbuilder', 'system', 'thread', 'threadgroup', 'threadlocal', 'throwable', 'void'}
/]

[query private isJavaSpecialWord(aString : String) : Boolean =
((javaKeywords(aString)->union(javaLangWords(aString)))->includes(aString.toLower()))
/]

[query public javaBasePackageName(anAdaptorInterface : AdaptorInterface) : String =
anAdaptorInterface.javaBasePackageName('resources')
/]

[query public javaBasePackageName(anAdaptorInterface : AdaptorInterface, default : String) : String =
(if anAdaptorInterface.configuration.oclIsUndefined()._or(anAdaptorInterface.configuration.generalConfiguration.oclIsUndefined()) then 
    (if anAdaptorInterface.javaClassBaseNamespace.isNullOrEmpty() then 
        default
    else
        anAdaptorInterface.javaClassBaseNamespace
    endif)
else
    anAdaptorInterface.configuration.generalConfiguration.javaBasePackageName
endif)
/]

[query public javaPackageName(aSpecification: Specification, anAdaptorInterface : AdaptorInterface, default : String) : String = 
(if (aSpecification.configuration.oclIsUndefined())._or(aSpecification.configuration.generalConfiguration.javaBasePackageName.isNullOrEmpty()) then 
    (if (anAdaptorInterface.oclIsUndefined()) then 
        default
    else
        anAdaptorInterface.javaBasePackageName(default).concat('.resources')
    endif)
else
    aSpecification.configuration.generalConfiguration.javaBasePackageName
endif)
/]

[query public javaPackageName(vocabularies: Vocabularies, anAdaptorInterface : AdaptorInterface, default : String) : String = 
(if (vocabularies.configuration.oclIsUndefined())._or(vocabularies.configuration.generalConfiguration.javaBasePackageName.isNullOrEmpty()) then 
    (if (anAdaptorInterface.oclIsUndefined()) then 
        default
    else
        anAdaptorInterface.javaBasePackageName(default).concat('.resources')
    endif)
else
    vocabularies.configuration.generalConfiguration.javaBasePackageName
endif)
/]

[query public javaPackageName(aDomainSpecification: DomainSpecification, anAdaptorInterface : AdaptorInterface, default : String) : String = 
(if (aDomainSpecification.configuration.oclIsUndefined())._or(aDomainSpecification.configuration.generalConfiguration.javaBasePackageName.isNullOrEmpty()) then 
    aDomainSpecification.eContainer(Specification).javaPackageName(anAdaptorInterface, default)
else
    aDomainSpecification.configuration.generalConfiguration.javaBasePackageName
endif)
/]

[query public javaPackageName(aVocabulary: Vocabulary, anAdaptorInterface : AdaptorInterface, default : String) : String = 
(if (aVocabulary.configuration.oclIsUndefined())._or(aVocabulary.configuration.generalConfiguration.javaBasePackageName.isNullOrEmpty()) then 
    aVocabulary.eContainer(Vocabularies).javaPackageName(anAdaptorInterface, default)
else
    aVocabulary.configuration.generalConfiguration.javaBasePackageName
endif)
/]

[query public filesBasePath(anAdaptorInterface : AdaptorInterface) : String =
anAdaptorInterface.filesBasePath('.')
/]

[query public filesBasePath(anAdaptorInterface : AdaptorInterface, default : String) : String =
(if anAdaptorInterface.configuration.oclIsUndefined()._or(anAdaptorInterface.configuration.generalConfiguration.oclIsUndefined()) then 
    (if anAdaptorInterface.javaFilesBasePath.isNullOrEmpty() then 
        default
    else
        anAdaptorInterface.javaFilesBasePath.substitute('/src/main/java', '')
    endif)
else
    anAdaptorInterface.configuration.generalConfiguration.filesBasePath
endif)
/]

[query public filesBasePath(aSpecification: Specification, anAdaptorInterface : AdaptorInterface, default : String) : String = 
(if (aSpecification.configuration.oclIsUndefined())._or(aSpecification.configuration.generalConfiguration.filesBasePath.isNullOrEmpty()) then 
    (if (anAdaptorInterface.oclIsUndefined()) then 
        default
    else
        anAdaptorInterface.filesBasePath(default)
    endif)
else
    aSpecification.configuration.generalConfiguration.filesBasePath
endif)
/]

[query public filesBasePath(vocabularies: Vocabularies, anAdaptorInterface : AdaptorInterface, default : String) : String = 
(if (vocabularies.configuration.oclIsUndefined())._or(vocabularies.configuration.generalConfiguration.filesBasePath.isNullOrEmpty()) then 
    (if (anAdaptorInterface.oclIsUndefined()) then 
        default
    else
        anAdaptorInterface.filesBasePath(default)
    endif)
else
    vocabularies.configuration.generalConfiguration.filesBasePath
endif)
/]

[query public filesBasePath(aDomainSpecification: DomainSpecification, anAdaptorInterface : AdaptorInterface, default : String) : String = 
(if (aDomainSpecification.configuration.oclIsUndefined())._or(aDomainSpecification.configuration.generalConfiguration.filesBasePath.isNullOrEmpty()) then 
    aDomainSpecification.eContainer(Specification).filesBasePath(anAdaptorInterface, default)
else
    aDomainSpecification.configuration.generalConfiguration.filesBasePath
endif)
/]

[query public filesBasePath(aVocabulary: Vocabulary, anAdaptorInterface : AdaptorInterface, default : String) : String = 
(if (aVocabulary.configuration.oclIsUndefined())._or(aVocabulary.configuration.generalConfiguration.filesBasePath.isNullOrEmpty()) then 
    aVocabulary.eContainer(Vocabularies).filesBasePath(anAdaptorInterface, default)
else
    aVocabulary.configuration.generalConfiguration.filesBasePath
endif)
/]

[query private propertyFilesRelativePath(traceabilityContext : OclAny) : String =
'/src/main/resources'
/]

[query private javaFilesRelativePath(traceabilityContext : OclAny) : String =
'/src/main/java'
/]

[query private webFilesRelativePath(traceabilityContext : OclAny) : String =
'/src/main/webapp'
/]

[query public propertyFilesBasePath(anAdaptorInterface : AdaptorInterface) : String =
anAdaptorInterface.filesBasePath().concatenatePaths(propertyFilesRelativePath())
/]

[query public javaFilesBasePath(anAdaptorInterface : AdaptorInterface) : String =
anAdaptorInterface.filesBasePath().concatenatePaths(javaFilesRelativePath())
/]

[query public javaFilesBasePath(anAdaptorInterface : AdaptorInterface, default : String) : String =
anAdaptorInterface.filesBasePath(default).concatenatePaths(javaFilesRelativePath())
/]

[query public javaFilesBasePath(aSpecification: Specification, anAdaptorInterface : AdaptorInterface, default : String) : String = 
aSpecification.filesBasePath(anAdaptorInterface, default).concatenatePaths(javaFilesRelativePath())
/]

[query public javaFilesBasePath(vocabularies: Vocabularies, anAdaptorInterface : AdaptorInterface, default : String) : String = 
vocabularies.filesBasePath(anAdaptorInterface, default).concatenatePaths(javaFilesRelativePath())
/]

[query public javaFilesBasePath(aDomainSpecification: DomainSpecification, anAdaptorInterface : AdaptorInterface, default : String) : String = 
aDomainSpecification.filesBasePath(anAdaptorInterface, default).concatenatePaths(javaFilesRelativePath())
/]

[query public javaFilesBasePath(aVocabulary: Vocabulary, anAdaptorInterface : AdaptorInterface, default : String) : String = 
aVocabulary.filesBasePath(anAdaptorInterface, default).concatenatePaths(javaFilesRelativePath())
/]

[query public webFilesBasePath(anAdaptorInterface : AdaptorInterface) : String =
anAdaptorInterface.filesBasePath().concatenatePaths(webFilesRelativePath())
/]

[query public webFilesWebappPath(anAdaptorInterface : AdaptorInterface) : String =
'/'.concat(anAdaptorInterface.javaBasePackageName()).substituteAll('.', '/')
/]

[comment unlike other "do not generate" flags, doNotGenerateFromImportedModels is not recursive.
We only read the top level "doNotGenerateFromImportedModels" and decide whether objects from any imported model (direct or indirect) will be generated./]
[query public generateIfFromImportedModels(anAdaptorInterface : AdaptorInterface, obj : EObject) : Boolean = 
    not anAdaptorInterface.doNotGenerateFromImportedModels() 
    or (anAdaptorInterface.eResource() = obj.eResource())
/]

[query public generateIfFromImportedModels(aSpecification: Specification, obj : EObject) : Boolean = 
    not aSpecification.doNotGenerateFromImportedModels() 
    or (aSpecification.eResource() = obj.eResource())
/]

[query public doNotGenerateFromImportedModels(anAdaptorInterface : AdaptorInterface) : Boolean = 
(if (anAdaptorInterface.configuration.oclIsUndefined())._or(anAdaptorInterface.configuration.generalConfiguration.doNotGenerateFromImportedModels.oclIsUndefined()) then 
    false
else
    anAdaptorInterface.configuration.generalConfiguration.doNotGenerateFromImportedModels
endif)
/]

[query public doNotGenerateFromImportedModels(aSpecification: Specification) : Boolean = 
(if (aSpecification.configuration.oclIsUndefined())._or(aSpecification.configuration.generalConfiguration.doNotGenerateFromImportedModels.oclIsUndefined()) then 
    false
else
    aSpecification.configuration.generalConfiguration.doNotGenerateFromImportedModels
endif)
/]

[query public doNotRegenerateJspFiles(anAdaptorInterface : AdaptorInterface) : Boolean = 
(if anAdaptorInterface.configuration.oclIsUndefined()._or(anAdaptorInterface.configuration.doNotRegenerateJspFiles.oclIsUndefined()) then 
    false
else
    anAdaptorInterface.configuration.doNotRegenerateJspFiles
endif)
/]

[comment We do not generate if the model does not contain a projectSetting, since we won't know how to. We need all the parameters to produce valid files/]
[query public doNotGenerateProjectFiles(anAdaptorInterface : AdaptorInterface) : Boolean = 
(if (anAdaptorInterface.configuration.oclIsUndefined()) then 
    true
else
    (if anAdaptorInterface.configuration.projectConfiguration.doNotGenerateProjectConfigurationFiles.oclIsUndefined() then 
        false
    else
        anAdaptorInterface.configuration.projectConfiguration.doNotGenerateProjectConfigurationFiles
    endif)
endif)
/]
[query public doNotGenerateProjectFiles(aSpecification : Specification) : Boolean = 
(if (aSpecification.configuration.oclIsUndefined()) then 
    true
else
    (if aSpecification.configuration.projectConfiguration.doNotGenerateProjectConfigurationFiles.oclIsUndefined() then 
        false
    else
        aSpecification.configuration.projectConfiguration.doNotGenerateProjectConfigurationFiles
    endif)
endif)
/]
[query public doNotGenerateProjectFiles(aDomainSpecification : DomainSpecification) : Boolean = 
(if (aDomainSpecification.configuration.oclIsUndefined()) then 
    true
else
    (if aDomainSpecification.configuration.projectConfiguration.doNotGenerateProjectConfigurationFiles.oclIsUndefined() then 
        false
    else
        aDomainSpecification.configuration.projectConfiguration.doNotGenerateProjectConfigurationFiles
    endif)
endif)
/]

[query public doNotGenerate(aSpecification: Specification) : Boolean = 
(if (aSpecification.configuration.oclIsUndefined())._or(aSpecification.configuration.generalConfiguration.doNotGenerate.oclIsUndefined()) then 
    false
else
    aSpecification.configuration.generalConfiguration.doNotGenerate
endif)
/]

[query public doNotGenerate(vocabularies: Vocabularies) : Boolean = 
(if (vocabularies.configuration.oclIsUndefined())._or(vocabularies.configuration.generalConfiguration.doNotGenerate.oclIsUndefined()) then 
    false
else
    vocabularies.configuration.generalConfiguration.doNotGenerate
endif)
/]

[query public doNotGenerate(aDomainSpecification: DomainSpecification) : Boolean = 
(if (aDomainSpecification.configuration.oclIsUndefined())._or(aDomainSpecification.configuration.generalConfiguration.doNotGenerate.oclIsUndefined()) then 
    aDomainSpecification.eContainer(Specification).doNotGenerate()
else
    aDomainSpecification.configuration.generalConfiguration.doNotGenerate
endif)
/]

[query public doNotGenerate(aVocabulary: Vocabulary) : Boolean = 
(if (aVocabulary.configuration.oclIsUndefined())._or(aVocabulary.configuration.generalConfiguration.doNotGenerate.oclIsUndefined()) then 
    aVocabulary.eContainer(Vocabularies).doNotGenerate()
else
    aVocabulary.configuration.generalConfiguration.doNotGenerate
endif)
/]

[query public methodSignature(parameters: Sequence(String), forJAXRSMethod : Boolean) : String = 
concatenate(
    parameters->collect(aParameter: String |
                        (if (forJAXRSMethod) then
                            '@PathParam("'.concat(aParameter).concat('") final String ').concat(aParameter)
                        else
                            'final String '.concat(aParameter)
                        endif)
    )->sep(', ').oclAsType(String))
/]

[query public methodParameterList(parameters: Sequence(String)) : String = 
concatenate(parameters->sep(', ').oclAsType(String))
/]

[query public JAXRSPathAnnotation(pathAnnotation : String) : String =
    (if (isNullOrEmpty(pathAnnotation)) then
        '@Path("")'
    else
        '@Path("'.concat(pathAnnotation).concat('")')
    endif)
/]

[query public JAXRSPathParameters(uriSegment : String) : Sequence(String) =
uriSegment.tokenize('}')
    ->select(token : String | token.index('{') <> -1)
    ->collect(token : String | token.substring(token.index('{')+1))
/]

[query private stripURISegmentEnd(URISegment : String) : String =
(if (URISegment.size() = 0) then
     URISegment
else
    (if (URISegment.size() = 1) then
         (if (URISegment.endsWith('/')) then '' else URISegment endif)
    else
        URISegment.substring(1, URISegment.size()-(if (URISegment.endsWith('/')) then 1 else 0 endif))
    endif)
endif)
/]

[query private stripURISegmentStart(URISegment : String) : String =
(if (URISegment.size() = 0) then
     URISegment
else
    (if (URISegment.size() = 1) then
         (if (URISegment.startsWith('/')) then '' else URISegment endif)
    else
        URISegment.substring((if (URISegment.startsWith('/')) then 2 else 1 endif), URISegment.size())
    endif)
endif)
/]

[query public JAXRSConcatURISegments(leftURISegment : String, rightURISegment : String) : String =
    concatenatePaths(leftURISegment, rightURISegment)
/]

[query public concatenatePaths (leftSegment : String, rightSegment : String) : String =
(if (stripURISegmentEnd(leftSegment).size() = 0) then
    stripURISegmentStart(rightSegment)
else
    (if (stripURISegmentStart(rightSegment).size() = 0) then
        stripURISegmentEnd(leftSegment)
    else
        stripURISegmentEnd(leftSegment).concat('/').concat(stripURISegmentStart(rightSegment))
    endif)
endif)
/]

[query public commaSeparate(commaSeparatedString : String, prependIfNotEmpty : Boolean, appendIfNotEmpty : Boolean) : String =
(if prependIfNotEmpty._and(commaSeparatedString.size() > 0) then ', ' else ''endif)
.concat(commaSeparatedString)
.concat(
(if appendIfNotEmpty._and(commaSeparatedString.size() > 0) then ' ,' else ''endif)
)
/]

[query public javaSimpleStringFromUri(uriString: String, toUpperFirst : Boolean) : String =
javaString(uriString.tokenize('/\\#')->last(), '', toUpperFirst)
/]

[query public javaConstantString (aString : String) : String =
concatenate(
    aString.replaceAll('\\W+', '_').tokenize('_')->sep('_').oclAsType(String)
).toUpperCase()
/]

[query private javaString (aString : String) : String =
concatenate(
    aString.replaceAll('\\W+', ' ').tokenize(' ')->collect(s : String  | s.toUpperFirst())
)
/]

[query public javaString (aString : String, prefixIfNecessary : String, toUpperFirst : Boolean) : String =
let base : String = (if (isJavaSpecialWord(aString)) then prefixIfNecessary.concat(javaString(aString).toUpperFirst()) else javaString(aString) endif)
in 
if (toUpperFirst) then base.toUpperFirst() else base.toLowerFirst() endif
/]

[query public concatenate (aStringSequence : Sequence(String)) : String =
(if (aStringSequence->size() = 0) then
    ''
else
    (if (aStringSequence->size() = 1) then
        aStringSequence->at(1)
    else
        (if (aStringSequence->size() = 2) then
            aStringSequence->at(1).concat(aStringSequence->at(2))
        else
            aStringSequence->at(1).concat(aStringSequence->at(2)).concat(concatenate(aStringSequence->subSequence(3, aStringSequence->size())))
        endif)
    endif)
endif)
/]

[query public concatenate (aStringSequence : Sequence(String), separatorString : String) : String =
    concatenate(aStringSequence->sep(separatorString).oclAsType(String))
/]

[query public isNullOrEmpty (aString : String) : Boolean =
(aString.oclIsUndefined())._or(aString.trim().equalsIgnoreCase(''))
/]

[query public annotationConsumesRDF(ai: AdaptorInterface) : String =
'@Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })'
/]

[query public annotationProducesRDF(ai: AdaptorInterface) : String =
'@Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_JSON_LD, OslcMediaType.TEXT_TURTLE, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})'
/]

