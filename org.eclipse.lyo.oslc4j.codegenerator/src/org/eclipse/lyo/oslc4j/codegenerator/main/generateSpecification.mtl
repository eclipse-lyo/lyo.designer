[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module generateSpecification('http://org.eclipse.lyo/oslc4j/adaptorInterface', 'http://org.eclipse.lyo/oslc4j/vocabulary','http://www.eclipse.org/emf/2002/Ecore')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::domainSpecificationServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::vocabularyServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourcePropertyServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateAdaptorPackageInfo/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateDomainSpecificationConstants/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateVocabularyConstants/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResource/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceInterface/]
[import org::eclipse::lyo::oslc4j::codegenerator::staticFiles::generateLicenseFiles/]
[import org::eclipse::lyo::oslc4j::codegenerator::config::generateConfigFiles/]

[query public canGenerate(aSpecification : Specification) : Boolean = 
not(
aSpecification.configuration.oclIsUndefined()
 or(aSpecification.configuration.generalConfiguration.filesBasePath.isNullOrEmpty())
 or(aSpecification.configuration.generalConfiguration.javaBasePackageName.isNullOrEmpty())
)
/]

[template public generateSpecification(aSpecification : Specification)]
[comment @main/]
[if (canGenerate(aSpecification))]
[let defaultJavaFilesPath : String = aSpecification.configuration.generalConfiguration.filesBasePath]
[let defaultJavaClassPackageName : String = aSpecification.configuration.generalConfiguration.javaBasePackageName]
    [aSpecification.generateLicenseFiles() /] 
    [aSpecification.generateConfigFiles(null, defaultJavaFilesPath) /]

    [let resources: Set(Resource) = aSpecification.relevantResources()->select(r: Resource | aSpecification.generateIfFromImportedModels(r.oclAsType(EObject)))]
    [let uniqueFolderPaths: Set(String) = resources->collect(r: Resource | r.javaClassFullFolderName(null, defaultJavaFilesPath, defaultJavaClassPackageName))->asSet()]
    [for (uniqueFolderPath: String | uniqueFolderPaths)]
        [let resourcesOnSameFolderPath: Set(Resource) = resources->select(r: Resource | r.javaClassFullFolderName(null, defaultJavaFilesPath, defaultJavaClassPackageName) = uniqueFolderPath)]
        [generateAdaptorPackageInfo(resourcesOnSameFolderPath, null, defaultJavaFilesPath, defaultJavaClassPackageName)/]
        [/let]
    [/for]
    [/let]
    [/let]

    [for (aDomainSpecification: DomainSpecification | aSpecification.relevantDomainSpecifications()
        ->select(d: DomainSpecification | aSpecification.generateIfFromImportedModels(d.oclAsType(EObject))))]
        [aDomainSpecification.generateDomainSpecificationConstants(null, defaultJavaFilesPath, defaultJavaClassPackageName)/]
        [aDomainSpecification.generateConfigFiles(null, defaultJavaFilesPath)/]
    [/for]

    [for (aVocabulary: Vocabulary | aSpecification.relevantVocabularies()
        ->select(v: Vocabulary | aSpecification.generateIfFromImportedModels(v.oclAsType(EObject))))]
        [aVocabulary.generateVocabularyConstants(null, defaultJavaFilesPath, defaultJavaClassPackageName)/]
    [/for]

    [for (aResource: Resource | aSpecification.relevantResources()
        ->select(r: Resource | aSpecification.generateIfFromImportedModels(r.oclAsType(EObject))))]
        [aResource.generateResource(null, defaultJavaFilesPath, defaultJavaClassPackageName) /]
        [aResource.generateResourceInterface(null, null, defaultJavaFilesPath, defaultJavaClassPackageName) /]
    [/for]
[/let]
[/let]
[/if]
[/template]
