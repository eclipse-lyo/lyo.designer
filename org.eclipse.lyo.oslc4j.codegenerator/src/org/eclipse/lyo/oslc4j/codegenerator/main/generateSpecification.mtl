[comment encoding = UTF-8 /]
[comment
/*******************************************************************************
 * Copyright (c) 2017 Jad El-khoury.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Jad El-khoury        - initial implementation of specification generation
 *******************************************************************************/
/]

[module generateSpecification('http://org.eclipse.lyo/oslc4j/adaptorInterface', 'http://org.eclipse.lyo/oslc4j/vocabulary','http://www.eclipse.org/emf/2002/Ecore')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::domainSpecificationServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::vocabularyServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::resourcePropertyServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]

[import org::eclipse::lyo::oslc4j::codegenerator::files::generateDomainSpecificationConstants/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateVocabularyConstants/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResource/]
[import org::eclipse::lyo::oslc4j::codegenerator::files::generateResourceInterface/]
[import org::eclipse::lyo::oslc4j::codegenerator::staticFiles::generateLicenseFiles/]
[import org::eclipse::lyo::oslc4j::codegenerator::config::generateConfigFiles/]

[query public canGenerate(aSpecification : Specification) : Boolean = 
not(
aSpecification.configuration.oclIsUndefined()
 or(aSpecification.configuration.generalConfiguration.filesBasePath.isNullOrEmpty())
 or(aSpecification.configuration.generalConfiguration.javaBasePackageName.isNullOrEmpty())
)
/]

[template public generateSpecification(aSpecification : Specification)]
[comment @main/]
[if (canGenerate(aSpecification))]
    [aSpecification.generateLicenseFiles() /] 
    [aSpecification.generateConfigFiles(null, aSpecification.configuration.generalConfiguration.filesBasePath) /]

    [for (aDomainSpecification: DomainSpecification | aSpecification.relevantDomainSpecifications()
        ->select(d: DomainSpecification | aSpecification.generateIfFromImportedModels(d.oclAsType(EObject))))]
        [aDomainSpecification.generateDomainSpecificationConstants(null, aSpecification.configuration.generalConfiguration.filesBasePath, aSpecification.configuration.generalConfiguration.javaBasePackageName)/]
        [aDomainSpecification.generateConfigFiles(null, aSpecification.configuration.generalConfiguration.filesBasePath)/]
    [/for]

    [for (aVocabulary: Vocabulary | aSpecification.relevantVocabularies()
        ->select(v: Vocabulary | aSpecification.generateIfFromImportedModels(v.oclAsType(EObject))))]
        [aVocabulary.generateVocabularyConstants(null, aSpecification.configuration.generalConfiguration.filesBasePath, aSpecification.configuration.generalConfiguration.javaBasePackageName)/]
    [/for]

    [for (aResource: Resource | aSpecification.relevantResources()
        ->select(r: Resource | aSpecification.generateIfFromImportedModels(r.oclAsType(EObject))))]
        [aResource.generateResource(null, aSpecification.configuration.generalConfiguration.filesBasePath, aSpecification.configuration.generalConfiguration.javaBasePackageName) /]
        [aResource.generateResourceInterface(null, null, aSpecification.configuration.generalConfiguration.filesBasePath, aSpecification.configuration.generalConfiguration.javaBasePackageName) /]
    [/for]
[/if]
[/template]
