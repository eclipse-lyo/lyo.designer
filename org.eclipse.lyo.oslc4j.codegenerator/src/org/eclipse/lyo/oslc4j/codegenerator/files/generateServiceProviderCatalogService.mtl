[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module generateServiceProviderCatalogService('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceProviderCatalogServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::jspServices/]

[template public generateCopyright(aServiceProviderCatalog : ServiceProviderCatalog)]
// [protected ('Copyright')]
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// [/protected]
[/template]

[template public generateImports(aServiceProviderCatalog : ServiceProviderCatalog)]
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.WebApplicationException;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response.Status;
import jakarta.ws.rs.core.UriInfo;
import jakarta.ws.rs.core.Response;

import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.Compact;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.ServiceProviderCatalog;

import [javaInterfaceFullNameForAdaptorConstants(containingAdaptorInterface(aServiceProviderCatalog)) /];
import [javaClassFullNameForAdaptorManager(containingAdaptorInterface(aServiceProviderCatalog)) /];
import [javaClassFullNameForSingleton(aServiceProviderCatalog) /];

// [protected ('imports')]
// [/protected]
[/template]

[template public getServiceProviderCatalogs(aServiceProviderCatalog : ServiceProviderCatalog)]
/**
 * Redirect requests to /catalog to /catalog/singleton
 *
 * By default, OSLC4J returns an OSLC query response for /catalog.  We really just
 * want the catalog itself which lives at /catalog/{serviceProviderCatalogId}
 *
 * @return
 * @throws IOException
 * @throws URISyntaxException
 */
@OslcDialog
(
     title = "Service Provider Catalog Selection Dialog",
     label = "Service Provider Catalog Selection Dialog",
     uri = "/catalog",
     hintWidth = "1000px",
     hintHeight = "600px",
     resourceTypes = {OslcConstants.TYPE_SERVICE_PROVIDER_CATALOG},
     usages = {OslcConstants.OSLC_USAGE_DEFAULT}
)
@OslcQueryCapability
(
    title = "Service Provider Catalog Query Capability",
    label = "Service Provider Catalog Query",
    resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + OslcConstants.PATH_SERVICE_PROVIDER_CATALOG,
    resourceTypes = {OslcConstants.TYPE_SERVICE_PROVIDER_CATALOG},
    usages = {OslcConstants.OSLC_USAGE_DEFAULT}
)
@GET
public Response getServiceProviderCatalogs() throws IOException, URISyntaxException
{
    String forwardUri = uriInfo.getAbsolutePath() + "/singleton";
    httpServletResponse.sendRedirect(forwardUri);
    return Response.seeOther(new URI(forwardUri)).build();
}
[/template]

[template public getServiceProviderCatalogAsRdf(aServiceProviderCatalog : ServiceProviderCatalog)]
/**
 * Return the OSLC service provider catalog as RDF/XML, XML or JSON
 *
 * @return
 */
@GET
@Path("{serviceProviderCatalogId}") // Required to distinguish from array result.  But, ignored.
[annotationProducesRDF(containingAdaptorInterface(aServiceProviderCatalog)) /]
public ServiceProviderCatalog getServiceProviderCatalog(@PathParam("serviceProviderCatalogId") final String serviceProviderCatalogId)
{
    ServiceProviderCatalog catalog =  ServiceProviderCatalogSingleton.getServiceProviderCatalog(httpServletRequest);

    if (catalog != null) {
        httpServletResponse.addHeader([javaInterfaceNameForAdaptorConstants(containingAdaptorInterface(aServiceProviderCatalog)) /].HDR_OSLC_VERSION,"2.0");
        return catalog;
    }

    throw new WebApplicationException(Status.NOT_FOUND);
}
[/template]

[template public getServiceProviderCatalogAsHtml(aServiceProviderCatalog : ServiceProviderCatalog)]
/**
 * Return the catalog singleton as HTML
 *
 * Forwards to serviceprovidercatalog_html.jsp to build the html
 *
 */
@GET
@Path("{someId}")
@Produces(MediaType.TEXT_HTML)
public void getHtmlServiceProvider(@PathParam("someId") final String someId)
{
    ServiceProviderCatalog catalog = ServiceProviderCatalogSingleton.getServiceProviderCatalog(httpServletRequest);

    if (catalog !=null )
    {
        httpServletRequest.setAttribute("catalog",catalog);
        // [protected ('getHtmlServiceProvider_setAttributes')]
        // [/protected]

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("[serviceProviderCatalogJspRelativeFileName() /]");
        try {
            rd.forward(httpServletRequest, httpServletResponse);
            return;
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e);
        }
    }
}
[/template]

[template public generateServiceProviderCatalogService(aServiceProviderCatalog : ServiceProviderCatalog)]
[file (javaClassFullFileNameForService(aServiceProviderCatalog), false, 'UTF-8')]
[generateCopyright(aServiceProviderCatalog)/]

package [javaClassPackageNameForService(aServiceProviderCatalog) /];

[generateImports(aServiceProviderCatalog)/]

@OslcService(OslcConstants.OSLC_CORE_DOMAIN)
@Path("catalog")
public class [javaClassNameForService(aServiceProviderCatalog) /]
{
    @Context private HttpServletRequest httpServletRequest;
    @Context private HttpServletResponse httpServletResponse;
    @Context private UriInfo uriInfo;

    [getServiceProviderCatalogs(aServiceProviderCatalog)/]

    [getServiceProviderCatalogAsRdf(aServiceProviderCatalog)/]

    [getServiceProviderCatalogAsHtml(aServiceProviderCatalog)/]
}
[/file]
[/template]
