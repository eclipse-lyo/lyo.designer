[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module generateApplicationBinder('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]

[template public generateClassHeader(anAdaptorInterface : AdaptorInterface)]
// [protected ('Copyright')]
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// [/protected]
[/template]

[template public generateImports(anAdaptorInterface : AdaptorInterface)]
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.glassfish.hk2.api.Factory;
import org.glassfish.hk2.utilities.binding.AbstractBinder;

[if (anAdaptorInterface.trsServiceEnabled())]
import org.eclipse.lyo.oslc4j.trs.server.PagedTrs;
import [javaClassFullNameForAdaptorManager(anAdaptorInterface) /];
[/if]

// [protected ('imports')]
// [/protected]
[/template]

[template public generateConfigureMethod(anAdaptorInterface : AdaptorInterface) post (trim())]
@Override
protected void configure() {
    log.info("HK2 contract binding start");

    [if (anAdaptorInterface.trsServiceEnabled())]
    bindFactory(new TRSFactory()).to(PagedTrs.class);
    [/if]
}
[/template]

[template public generateTRSFactory(anAdaptorInterface : AdaptorInterface) post (trim())]
[if (anAdaptorInterface.trsServiceEnabled())]
private final class TRSFactory implements Factory<PagedTrs> {
    @Override
    public PagedTrs provide() {
        return [anAdaptorInterface.javaClassNameForAdaptorManager()/].getPagedTrs();
    }

    @Override
    public void dispose(PagedTrs instance) {
    }
}
[/if]
[/template]

[template public generateApplicationBinder(anAdaptorInterface : AdaptorInterface)]
[file (javaClassFullFileNameForApplicationBinder(anAdaptorInterface), false, 'UTF-8')]
[generateClassHeader(anAdaptorInterface)/]

package [javaClassPackageNameForApplicationBinder(anAdaptorInterface) /];

[generateImports(anAdaptorInterface)/]

// [protected ('pre_class_code')]
// [/protected]

public class [javaClassNameForApplicationBinder(anAdaptorInterface) /] extends AbstractBinder {

    private static final Logger log = LoggerFactory.getLogger([javaClassNameForApplicationBinder(anAdaptorInterface)/].class);

    // [protected ('class_attributes')]
    // [/protected]

    // [protected ('class_methods')]
    // [/protected]

    public [javaClassNameForApplicationBinder(anAdaptorInterface)/]()
    {
        log.info("HK2 contract binding init");
    }

    [generateConfigureMethod(anAdaptorInterface)/]

    [generateTRSFactory(anAdaptorInterface)/]
}
[/file]
[/template]
