[comment encoding = UTF-8 /]
[comment
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License 1.0
 * which is available at http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: EPL-2.0 OR BSD-3-Simple
 */
/]
[module generateApplicationBinder('http://org.eclipse.lyo/oslc4j/adaptorInterface')]

[import org::eclipse::lyo::oslc4j::codegenerator::services::services/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::serviceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::adaptorInterfaceServices/]
[import org::eclipse::lyo::oslc4j::codegenerator::services::storeServices/]

[template public generateClassHeader(anAdaptorInterface : AdaptorInterface)]
// [protected ('Copyright')]
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// [/protected]
[/template]

[template public generateImports(anAdaptorInterface : AdaptorInterface)]
import java.util.ArrayList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.glassfish.hk2.api.Factory;
import org.glassfish.hk2.utilities.binding.AbstractBinder;

import javax.inject.Singleton;

import [anAdaptorInterface.javaClassFullNameForAdaptorManager()/];
import [anAdaptorInterface.javaClassFullNameForResourcesFactory()/];
[if (anAdaptorInterface.storeEnabled())][anAdaptorInterface.storeImportsForBinder()/][/if]
[if (anAdaptorInterface.trsServiceEnabled())
]import org.eclipse.lyo.oslc4j.trs.server.InmemPagedTrs;
import org.eclipse.lyo.oslc4j.trs.server.PagedTrs;
import org.eclipse.lyo.oslc4j.trs.server.PagedTrsFactory;
import org.eclipse.lyo.oslc4j.trs.server.TrsEventHandler;
[/if]
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
// [protected ('imports')]
// [/protected]
[/template]

[template public generateConfigureMethod(anAdaptorInterface : AdaptorInterface) post (trim())]
@Override
protected void configure() {
    log.info("HK2 contract binding start");

    bindAsContract([anAdaptorInterface.javaClassNameForAdaptorManager()/].class).in(Singleton.class);
    bindFactory(new ResourcesFactoryFactory()).to([anAdaptorInterface.javaClassNameForResourcesFactory()/].class).in(Singleton.class);

    [if (anAdaptorInterface.storeEnabled())]
    bindFactory(new StorePoolFactory()).to(StorePool.class).in(Singleton.class);
    [/if]
    [if (anAdaptorInterface.trsServiceEnabled())]
    // [protected ('TRSInitialise')]
    // [/protected]
    ArrayList<URI> uris = new ArrayList<URI>();
    // [protected ('TRSInitialBase')]
    //TODO: Provide the initial list of URIs to populate the TRS log with
    // [/protected]
    InmemPagedTrs inmemTrs = new PagedTrsFactory().getInmemPagedTrs([anAdaptorInterface.trsService.basePageLimit/], [anAdaptorInterface.trsService.changeLogPageLimit/], uris);
    bind(inmemTrs).to(TrsEventHandler.class);
    bind(inmemTrs).to(PagedTrs.class);
    // [protected ('TRSFinalize')]
    // [/protected]
    [/if]
}
[/template]

[template public generateResourcesFactoryFactory(anAdaptorInterface : AdaptorInterface) post (trim())]
private final class ResourcesFactoryFactory implements Factory<[anAdaptorInterface.javaClassNameForResourcesFactory()/]> {
    @Override
    public [anAdaptorInterface.javaClassNameForResourcesFactory()/] provide() {
        return new [anAdaptorInterface.javaClassNameForResourcesFactory()/](OSLC4JUtils.getServletURI());
    }

    @Override
    public void dispose([anAdaptorInterface.javaClassNameForResourcesFactory()/] instance) {
    }
}
[/template]

[template public generateStorePoolFactory(anAdaptorInterface : AdaptorInterface) post (trim())]
[if (anAdaptorInterface.storeEnabled())]
private final class StorePoolFactory implements Factory<StorePool> {
    @Override
    public StorePool provide() {
        [anAdaptorInterface.storeInitialization()/]
    }

    @Override
    public void dispose(StorePool instance) {
    }
}
[/if]
[/template]

[template public generateApplicationBinder(anAdaptorInterface : AdaptorInterface)]
[file (javaClassFullFileNameForApplicationBinder(anAdaptorInterface), false, 'UTF-8')]
[generateClassHeader(anAdaptorInterface)/]

package [javaClassPackageNameForApplicationBinder(anAdaptorInterface) /];

[generateImports(anAdaptorInterface)/]

// [protected ('pre_class_code')]
// [/protected]

public class [javaClassNameForApplicationBinder(anAdaptorInterface) /] extends AbstractBinder {

    private static final Logger log = LoggerFactory.getLogger([javaClassNameForApplicationBinder(anAdaptorInterface)/].class);

    // [protected ('class_attributes')]
    // [/protected]

    // [protected ('class_methods')]
    // [/protected]

    public [javaClassNameForApplicationBinder(anAdaptorInterface)/]()
    {
        log.info("HK2 contract binding init");
    }

    [generateConfigureMethod(anAdaptorInterface)/]
    [generateResourcesFactoryFactory(anAdaptorInterface)/]
    [generateStorePoolFactory(anAdaptorInterface)/]
}
[/file]
[/template]
